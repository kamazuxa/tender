import logging
from config import TELEGRAM_BOT_TOKEN, TENDER_GURU_API_KEY
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
import re
from urllib.parse import urlparse, parse_qs
import aiohttp
import os
import tempfile
import shutil

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

TENDERGURU_API_URL = "https://www.tenderguru.ru/api2.3/export"

platforms_cache = None

async def get_platforms_from_tenderguru():
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø–ª–æ—â–∞–¥–æ–∫ (—Ç–µ–Ω–¥–µ—Ä–Ω—ã—Ö –∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö) —á–µ—Ä–µ–∑ TenderGuru API.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å id, name, url.
    –ö—ç—à–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ platforms_cache.
    """
    global platforms_cache
    if platforms_cache is not None:
        return platforms_cache
    platforms = []
    async with aiohttp.ClientSession() as session:
        for mode in ["eauc", "eauc_rgi"]:
            params = {"mode": mode, "dtype": "json", "api_code": TENDER_GURU_API_KEY}
            logging.info(f"Requesting platforms: {params}")
            async with session.get(TENDERGURU_API_URL, params=params) as resp:
                logging.info(f"Response status: {resp.status}")
                if resp.status == 200:
                    data = await resp.json(content_type=None)
                    logging.info(f"Platforms API response: {data}")
                    for item in data.get("Items", []):
                        platforms.append({
                            "id": item.get("ID"),
                            "name": item.get("Name"),
                            "url": item.get("Url", "")
                        })
                else:
                    logging.error(f"Failed to get platforms for mode {mode}: {resp.status}")
    platforms_cache = platforms
    return platforms

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø TenderBot. –í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start ‚Äî –Ω–∞—á–∞—Ç—å\n/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞")

async def extract_tender_info_from_url(url):
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–ª–æ—â–∞–¥–∫—É –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç reg_number (–∏–ª–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä) –∏–∑ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–µ–Ω–¥–µ—Ä.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (reg_number, platform) –∏–ª–∏ (None, None) –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å.
    –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø–ª–æ—â–∞–¥–æ–∫ TenderGuru –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –ø–æ –¥–æ–º–µ–Ω—É.
    """
    if not url:
        return None, None
    domain = urlparse(url).netloc.lower()
    platforms = await get_platforms_from_tenderguru()
    matched_platform = None
    for p in platforms:
        if p["url"] and p["url"] in domain:
            matched_platform = p
            break
        if p["url"] and p["url"].replace("www.", "") in domain.replace("www.", ""):
            matched_platform = p
            break
    reg_number = None
    if matched_platform:
        qs = parse_qs(urlparse(url).query)
        for key in ["regNumber", "tenderid", "procedureId", "id", "lot", "purchase", "auction", "number"]:
            if key in qs:
                reg_number = qs[key][0]
                break
        if not reg_number:
            m = re.search(r'(\d{6,})', url)
            if m:
                reg_number = m.group(1)
        logging.info(f"Extracted reg_number={reg_number}, platform={matched_platform['name']} from url={url}")
        return reg_number, matched_platform["name"]
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî fallback –Ω–∞ —Ä—É—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
    # zakupki.gov.ru (–ï–ò–°)
    if "zakupki.gov.ru" in domain:
        # –ü—Ä–∏–º–µ—Ä: https://zakupki.gov.ru/epz/order/notice/ea44/view/common-info.html?regNumber=0123456789012345678
        qs = parse_qs(urlparse(url).query)
        reg_number = qs.get("regNumber", [None])[0]
        if not reg_number:
            # –ò–Ω–æ–≥–¥–∞ –Ω–æ–º–µ—Ä –≤ –ø—É—Ç–∏
            m = re.search(r'/notice/\w+/view/common-info\.html\?regNumber=(\d+)', url)
            if m:
                reg_number = m.group(1)
        return reg_number, "zakupki.gov.ru"
    # sberbank-ast.ru
    if "sberbank-ast.ru" in domain:
        # –ü—Ä–∏–º–µ—Ä: https://www.sberbank-ast.ru/procedure/auction/procedure-view/123456789
        m = re.search(r'/procedure-view/(\d+)', url)
        if m:
            return m.group(1), "sberbank-ast.ru"
    # b2b-center.ru
    if "b2b-center.ru" in domain:
        # –ü—Ä–∏–º–µ—Ä: https://www.b2b-center.ru/market/?action=show&tenderid=123456789
        qs = parse_qs(urlparse(url).query)
        reg_number = qs.get("tenderid", [None])[0]
        return reg_number, "b2b-center.ru"
    # roseltorg.ru
    if "roseltorg.ru" in domain:
        # –ü—Ä–∏–º–µ—Ä: https://www.roseltorg.ru/procedure/auction/view/procedure-cards/123456789
        m = re.search(r'/procedure-cards/(\d+)', url)
        if m:
            return m.group(1), "roseltorg.ru"
    # torgi.gov.ru
    if "torgi.gov.ru" in domain:
        # –ü—Ä–∏–º–µ—Ä: https://torgi.gov.ru/new/public/lot/view/123456789
        m = re.search(r'/lot/view/(\d+)', url)
        if m:
            return m.group(1), "torgi.gov.ru"
    # zakazrf.ru
    if "zakazrf.ru" in domain:
        # –ü—Ä–∏–º–µ—Ä: https://zakazrf.ru/tender/view/123456789
        m = re.search(r'/tender/view/(\d+)', url)
        if m:
            return m.group(1), "zakazrf.ru"
    # ... –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø–ª–æ—â–∞–¥–∫–∏ ...
    logging.warning(f"Could not extract reg_number/platform from url={url}")
    return None, None

class TenderGuruAPI:
    @staticmethod
    async def get_tender_by_number(reg_number):
        """
        –î–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ TenderGuru API –ø–æ reg_number –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–Ω–¥–µ—Ä–µ.
        """
        if not reg_number:
            logging.error("No reg_number provided to get_tender_by_number")
            return None
        params = {
            "regNumber": reg_number,
            "dtype": "json",
            "api_code": TENDER_GURU_API_KEY
        }
        logging.info(f"Requesting tender by number: {params}")
        async with aiohttp.ClientSession() as session:
            async with session.get(TENDERGURU_API_URL, params=params) as resp:
                logging.info(f"Tender API response status: {resp.status}")
                if resp.status == 200:
                    data = await resp.json(content_type=None)
                    logging.info(f"Tender API response: {data}")
                    items = data.get("Items")
                    if items and isinstance(items, list) and len(items) > 0:
                        item = items[0]
                        return {
                            "reg_number": reg_number,
                            "customer_name": item.get("Customer", "-"),
                            "purchase_subject": item.get("Name", "-"),
                            "price": item.get("Price", "-"),
                            "deadline": item.get("DateEnd", "-"),
                            "location": item.get("RegionName", "-")
                        }
                else:
                    logging.error(f"Failed to get tender by number {reg_number}: {resp.status}")
        return None

async def analyze_tender_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ–Ω–¥–µ—Ä", callback_data="wait_for_link")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ–Ω–¥–µ—Ä —Å –ª—é–±–æ–π –ø–ª–æ—â–∞–¥–∫–∏:\n"
        "‚úÖ zakupki.gov.ru\n"
        "‚úÖ sberbank-ast.ru\n"
        "‚úÖ b2b-center.ru\n"
        "‚úÖ roseltorg.ru\n"
        "‚úÖ torgi.gov.ru\n"
        "‚úÖ zakazrf.ru\n"
        "‚úÖ –∏ –¥—Ä.",
        reply_markup=reply_markup
    )

async def wait_for_link_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    if message and message.text:
        url = message.text.strip()
        reg_number, platform = await extract_tender_info_from_url(url)
        data = await TenderGuruAPI.get_tender_by_number(reg_number)
        if data:
            keyboard = [
                [InlineKeyboardButton("üß† –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏", callback_data=f"analyze_docs_{reg_number}")],
                [InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é", callback_data=f"download_docs_{reg_number}")],
                [InlineKeyboardButton("üìä –ü–æ—Ö–æ–∂–∏–µ –∑–∞–∫—É–ø–∫–∏", callback_data="similar_tenders")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            text = (
                f"üìÑ –¢–µ–Ω–¥–µ—Ä ‚Ññ{data['reg_number']}\n\n"
                f"üèõÔ∏è –ó–∞–∫–∞–∑—á–∏–∫: {data['customer_name']}\n"
                f"üìù –ü—Ä–µ–¥–º–µ—Ç: {data['purchase_subject']}\n"
                f"üí∞ –ù–ú–¶–ö: {data['price']}\n"
                f"üìÖ –î–µ–¥–ª–∞–π–Ω: {data['deadline']}\n"
                f"üìç –ú–µ—Å—Ç–æ –ø–æ—Å—Ç–∞–≤–∫–∏: {data['location']}\n"
            )
            if message:
                await message.reply_text(text, reply_markup=reply_markup)
        else:
            if message:
                await message.reply_text("–¢–µ–Ω–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É.")

async def download_all_files(reg_number):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –ø–æ reg_number —á–µ—Ä–µ–∑ TenderGuruAPI, —Å–∫–∞—á–∏–≤–∞–µ—Ç –∏—Ö, –∞—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç –≤ .zip –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –∞—Ä—Ö–∏–≤—É.
    """
    params = {
        "regNumber": reg_number,
        "dtype": "json",
        "api_code": TENDER_GURU_API_KEY
    }
    logging.info(f"Requesting files for tender: {params}")
    async with aiohttp.ClientSession() as session:
        async with session.get(TENDERGURU_API_URL, params=params) as resp:
            logging.info(f"Files API response status: {resp.status}")
            if resp.status == 200:
                data = await resp.json(content_type=None)
                logging.info(f"Files API response: {data}")
                items = data.get("Items")
                if items and isinstance(items, list) and len(items) > 0:
                    item = items[0]
                    files = item.get("Files") or item.get("Documents") or item.get("Attachments")
                    if not files:
                        logging.warning(f"No files found for tender {reg_number}")
                        return None
                    temp_dir = tempfile.mkdtemp()
                    file_paths = []
                    for f in files:
                        url = f.get("Url") or f.get("url")
                        name = f.get("Name") or f.get("name") or os.path.basename(url)
                        if url:
                            file_path = os.path.join(temp_dir, name)
                            try:
                                async with session.get(url) as file_resp:
                                    logging.info(f"Downloading file: {url}, status: {file_resp.status}")
                                    if file_resp.status == 200:
                                        with open(file_path, "wb") as out_f:
                                            out_f.write(await file_resp.read())
                                        file_paths.append(file_path)
                                    else:
                                        logging.error(f"Failed to download file: {url}, status: {file_resp.status}")
                            except Exception as e:
                                logging.error(f"Exception while downloading file {url}: {e}")
                                continue
                    if not file_paths:
                        shutil.rmtree(temp_dir)
                        return None
                    archive_path = shutil.make_archive(temp_dir, 'zip', temp_dir)
                    shutil.rmtree(temp_dir)
                    logging.info(f"Created archive: {archive_path}")
                    return archive_path
            else:
                logging.error(f"Failed to get files for tender {reg_number}: {resp.status}")
    return None

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if query:
        await query.answer()
        data = getattr(query, 'data', None)
        if data:
            if data.startswith("analyze_docs_"):
                await query.edit_message_text("üß† –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ (–±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)")
            elif data.startswith("download_docs_"):
                reg_number = data.split('_')[-1]
                await query.edit_message_text("‚è≥ –°–∫–∞—á–∏–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é...")
                archive_path = await download_all_files(reg_number)
                chat_id = query.message.chat_id if query.message else None
                if archive_path and chat_id:
                    try:
                        await context.bot.send_document(chat_id=chat_id, document=open(archive_path, "rb"), filename=f"tender_{reg_number}_docs.zip")
                        logging.info(f"Sent archive {archive_path} to chat {chat_id}")
                    except Exception as e:
                        logging.error(f"Error sending archive to chat {chat_id}: {e}")
                    os.remove(archive_path)
                else:
                    if chat_id:
                        await context.bot.send_message(chat_id=chat_id, text="–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª—ã.")
                    logging.warning(f"–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª—ã –¥–ª—è {reg_number}")
            elif data == "similar_tenders":
                await query.edit_message_text("üìä –ü–æ—Ö–æ–∂–∏–µ –∑–∞–∫—É–ø–∫–∏ (–±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –ø–æ–∑–∂–µ)")
            elif data == "wait_for_link":
                await query.edit_message_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ–Ω–¥–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")

if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("analyze", analyze_tender_command))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, wait_for_link_handler))
    app.run_polling() 