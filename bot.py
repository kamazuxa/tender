import logging
import requests
import os
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from config import TELEGRAM_BOT_TOKEN, TENDERGURU_API_KEY, OPENAI_API_KEY
from downloader import download_tender_documents
from analyzer import analyze_tender_documents

TENDERGURU_API_URL = "https://www.tenderguru.ru/api2.3/export"

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher(bot)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–Ω–¥–µ—Ä–∞—Ö –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
user_tenders = {}

def create_tender_keyboard(tender_number: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–Ω–¥–µ—Ä–æ–º"""
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã", callback_data=f"download_{tender_number}"),
        InlineKeyboardButton("ü§ñ –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é –ò–ò", callback_data=f"analyze_{tender_number}")
    )
    return keyboard

@dp.message_handler(commands=["start", "help"])
async def send_welcome(message: types.Message):
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–Ω–¥–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ TenderGuru.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /tender <–Ω–æ–º–µ—Ä> –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–Ω–¥–µ—Ä–µ.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: /tender 0372200186425000005"
    )

@dp.message_handler(commands=["tender"])
async def get_tender_info(message: types.Message):
    args = message.get_args()
    if not args:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –Ω–æ–º–µ—Ä —Ç–µ–Ω–¥–µ—Ä–∞: /tender <–Ω–æ–º–µ—Ä>")
        return
    
    tender_number = args.strip()
    user_id = message.from_user.id
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = await message.reply("üîç –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–Ω–¥–µ—Ä–µ...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–Ω–¥–µ—Ä–µ
        params = {
            "kwords": tender_number,
            "api_code": TENDERGURU_API_KEY,
            "dtype": "json"
        }
        
        response = requests.get(TENDERGURU_API_URL, params=params)
        if response.status_code != 200:
            await processing_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ TenderGuru API: {response.status_code}")
            return
        
        data = response.json()
        if not data or len(data) < 2:
            await processing_msg.edit_text("‚ùå –¢–µ–Ω–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        tender_info = data[1]  # –ë–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–Ω–¥–µ—Ä–∞
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–Ω–¥–µ—Ä–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_tenders[user_id] = {
            'tender_number': tender_number,
            'tender_info': tender_info
        }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–Ω–¥–µ—Ä–µ
        info_text = f"""
üìã **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–Ω–¥–µ—Ä–µ {tender_number}**

üè∑ **–ù–∞–∑–≤–∞–Ω–∏–µ:** {tender_info.get('TenderName', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üë§ **–ó–∞–∫–∞–∑—á–∏–∫:** {tender_info.get('Customer', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üìç **–†–µ–≥–∏–æ–Ω:** {tender_info.get('Region', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üí∞ **–¶–µ–Ω–∞:** {tender_info.get('Price', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} —Ä—É–±.
üìÖ **–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:** {tender_info.get('EndTime', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üè¢ **–ü–ª–æ—â–∞–¥–∫–∞:** {tender_info.get('Etp', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
        """
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = create_tender_keyboard(tender_number)
        
        await processing_msg.edit_text(info_text, reply_markup=keyboard, parse_mode='Markdown')
                    
    except Exception as e:
        await processing_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@dp.callback_query_handler(lambda c: c.data.startswith('download_'))
async def download_documents(callback_query: types.CallbackQuery):
    tender_number = callback_query.data.split('_')[1]
    user_id = callback_query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–Ω–¥–µ—Ä–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_tenders or user_tenders[user_id]['tender_number'] != tender_number:
        await callback_query.answer("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–Ω–¥–µ—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ —Ç–µ–Ω–¥–µ—Ä –∑–∞–Ω–æ–≤–æ.")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    processing_msg = await callback_query.message.reply("üì• –°–∫–∞—á–∏–≤–∞—é –¥–æ–∫—É–º–µ–Ω—Ç—ã...")
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
        result = download_tender_documents(tender_number)
        
        if result['success']:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—Ä—Ö–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            with open(result['archive_path'], 'rb') as archive:
                await bot.send_document(
                    chat_id=callback_query.from_user.id,
                    document=archive,
                    caption=f"üì¶ –î–æ–∫—É–º–µ–Ω—Ç—ã —Ç–µ–Ω–¥–µ—Ä–∞ {tender_number}\n"
                           f"üìÑ –°–∫–∞—á–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {result['total_files']}"
                )
            
            await processing_msg.edit_text("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            user_tenders[user_id]['downloaded_files'] = result['file_paths']
            
        else:
            await processing_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
    
    except Exception as e:
        await processing_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('analyze_'))
async def analyze_documents(callback_query: types.CallbackQuery):
    tender_number = callback_query.data.split('_')[1]
    user_id = callback_query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–Ω–¥–µ—Ä–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_tenders or user_tenders[user_id]['tender_number'] != tender_number:
        await callback_query.answer("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–Ω–¥–µ—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ —Ç–µ–Ω–¥–µ—Ä –∑–∞–Ω–æ–≤–æ.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–∫–∞—á–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    if 'downloaded_files' not in user_tenders[user_id] or not user_tenders[user_id]['downloaded_files']:
        await callback_query.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–∫–∞—á–∞–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Ç–µ–Ω–¥–µ—Ä–∞.")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
    processing_msg = await callback_query.message.reply("ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å –ø–æ–º–æ—â—å—é –ò–ò...")
    
    try:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
        file_paths = user_tenders[user_id]['downloaded_files']
        tender_info = user_tenders[user_id]['tender_info']
        
        analysis_result = analyze_tender_documents(file_paths, tender_info)
        
        if analysis_result['success']:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
            analysis_text = analysis_result['analysis']
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if len(analysis_text) > 4096:
                parts = [analysis_text[i:i+4096] for i in range(0, len(analysis_text), 4096)]
                for i, part in enumerate(parts):
                    if i == 0:
                        await processing_msg.edit_text(f"üìä **–ê–Ω–∞–ª–∏–∑ —Ç–µ–Ω–¥–µ—Ä–∞ {tender_number}** (—á–∞—Å—Ç—å {i+1}/{len(parts)})\n\n{part}", parse_mode='Markdown')
                    else:
                        await bot.send_message(
                            chat_id=callback_query.from_user.id,
                            text=f"üìä **–ê–Ω–∞–ª–∏–∑ —Ç–µ–Ω–¥–µ—Ä–∞ {tender_number}** (—á–∞—Å—Ç—å {i+1}/{len(parts)})\n\n{part}",
                            parse_mode='Markdown'
                        )
            else:
                await processing_msg.edit_text(f"üìä **–ê–Ω–∞–ª–∏–∑ —Ç–µ–Ω–¥–µ—Ä–∞ {tender_number}**\n\n{analysis_text}", parse_mode='Markdown')
            
        else:
            await processing_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {analysis_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
    
    except Exception as e:
        await processing_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    await callback_query.answer()

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True) 