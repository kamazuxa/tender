import logging
from config import TELEGRAM_BOT_TOKEN, TENDER_GURU_API_KEY, DAMIA_API_KEY
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
import re
from urllib.parse import urlparse, parse_qs
import aiohttp
import os
import tempfile
import shutil
import json
from downloader import download_tender_documents

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è API
api_logger = logging.getLogger('API_LOGGER')
api_logger.setLevel(logging.INFO)

# –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è API –ª–æ–≥–æ–≤
if not os.path.exists('logs'):
    os.makedirs('logs')

# –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥-—Ñ–∞–π–ª –¥–ª—è –≤—Å–µ—Ö API –æ—Ç–≤–µ—Ç–æ–≤
file_handler = logging.FileHandler('logs/api_responses.log', encoding='utf-8')
file_handler.setLevel(logging.INFO)
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
file_handler.setFormatter(formatter)
api_logger.addHandler(file_handler)

# –û—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–≥-—Ñ–∞–π–ª –¥–ª—è TenderGuru API
tenderguru_handler = logging.FileHandler('logs/tenderguru_api.log', encoding='utf-8')
tenderguru_handler.setLevel(logging.INFO)
tenderguru_handler.setFormatter(formatter)
api_logger.addHandler(tenderguru_handler)

# –û—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–≥-—Ñ–∞–π–ª –¥–ª—è Damia API
damia_handler = logging.FileHandler('logs/damia_api.log', encoding='utf-8')
damia_handler.setLevel(logging.INFO)
damia_handler.setFormatter(formatter)
api_logger.addHandler(damia_handler)

# –û—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–≥-—Ñ–∞–π–ª –¥–ª—è –æ—à–∏–±–æ–∫ API
error_handler = logging.FileHandler('logs/api_errors.log', encoding='utf-8')
error_handler.setLevel(logging.ERROR)
error_handler.setFormatter(formatter)
api_logger.addHandler(error_handler)

TENDERGURU_API_URL = "https://www.tenderguru.ru/api2.3/export"
DAMIA_API_URL = "https://api.damia.ru/zakupki"

platforms_cache = None

async def get_platforms_from_tenderguru():
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø–ª–æ—â–∞–¥–æ–∫ (—Ç–µ–Ω–¥–µ—Ä–Ω—ã—Ö –∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö) —á–µ—Ä–µ–∑ TenderGuru API.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å id, name, url.
    –ö—ç—à–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ platforms_cache.
    """
    global platforms_cache
    if platforms_cache is not None:
        return platforms_cache
    platforms = []
    async with aiohttp.ClientSession() as session:
        for mode in ["eauc", "eauc_rgi"]:
            params = {"mode": mode, "dtype": "json", "api_code": TENDER_GURU_API_KEY}
            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
            log_api_request("TenderGuru", TENDERGURU_API_URL, params)
            logging.info(f"Requesting platforms: {params}")
            async with session.get(TENDERGURU_API_URL, params=params) as resp:
                logging.info(f"Response status: {resp.status}")
                if resp.status == 200:
                    data = await resp.json(content_type=None)
                    # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API
                    log_api_response("TenderGuru", TENDERGURU_API_URL, params, data, resp.status)
                    logging.info(f"Platforms API response: {data}")
                    if isinstance(data, list):
                        for item in data:
                            platforms.append({
                                "id": item.get("ID"),
                                "name": item.get("EtpName") or item.get("Name"),
                                "url": item.get("EtpLink") or item.get("Url", "")
                            })
                    elif isinstance(data, dict):
                        for item in data.get("Items", []):
                            platforms.append({
                                "id": item.get("ID"),
                                "name": item.get("EtpName") or item.get("Name"),
                                "url": item.get("EtpLink") or item.get("Url", "")
                            })
                else:
                    logging.error(f"Failed to get platforms for mode {mode}: {resp.status}")
    if not platforms:
        logging.error("No platforms loaded from TenderGuru API!")
    platforms_cache = platforms
    return platforms

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        keyboard = [
            [InlineKeyboardButton("üîç TenderGuru", callback_data="wait_for_link_tenderguru")],
            [InlineKeyboardButton("üîç Damia API", callback_data="wait_for_link_damia")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø TenderBot. –í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–Ω–¥–µ—Ä–æ–≤:",
            reply_markup=reply_markup
        )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        await update.message.reply_text("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start ‚Äî –Ω–∞—á–∞—Ç—å\n/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞")

async def extract_tender_info_from_url(url):
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–ª–æ—â–∞–¥–∫—É –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç reg_number (–∏–ª–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä) –∏–∑ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–µ–Ω–¥–µ—Ä.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (reg_number, platform) –∏–ª–∏ (None, None) –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å.
    –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø–ª–æ—â–∞–¥–æ–∫ TenderGuru –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –ø–æ –¥–æ–º–µ–Ω—É.
    """
    if not url:
        return None, None
    domain = urlparse(url).netloc.lower()
    platforms = await get_platforms_from_tenderguru()
    matched_platform = None
    for p in platforms:
        if p["url"] and p["url"] in domain:
            matched_platform = p
            break
        if p["url"] and p["url"].replace("www.", "") in domain.replace("www.", ""):
            matched_platform = p
            break
    reg_number = None
    if matched_platform:
        qs = parse_qs(urlparse(url).query)
        for key in ["regNumber", "tenderid", "procedureId", "id", "lot", "purchase", "auction", "number"]:
            if key in qs:
                reg_number = qs[key][0]
                break
        if not reg_number:
            m = re.search(r'(\d{6,})', url)
            if m:
                reg_number = m.group(1)
        logging.info(f"Extracted reg_number={reg_number}, platform={matched_platform['name']} from url={url}")
        return reg_number, matched_platform["name"]
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî fallback –Ω–∞ —Ä—É—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
    # zakupki.gov.ru (–ï–ò–°)
    if "zakupki.gov.ru" in domain:
        # –ü—Ä–∏–º–µ—Ä: https://zakupki.gov.ru/epz/order/notice/ea44/view/common-info.html?regNumber=0123456789012345678
        qs = parse_qs(urlparse(url).query)
        reg_number = qs.get("regNumber", [None])[0]
        if not reg_number:
            # –ò–Ω–æ–≥–¥–∞ –Ω–æ–º–µ—Ä –≤ –ø—É—Ç–∏
            m = re.search(r'/notice/\w+/view/common-info\.html\?regNumber=(\d+)', url)
            if m:
                reg_number = m.group(1)
        return reg_number, "zakupki.gov.ru"
    # sberbank-ast.ru
    if "sberbank-ast.ru" in domain:
        # –ü—Ä–∏–º–µ—Ä: https://www.sberbank-ast.ru/procedure/auction/procedure-view/123456789
        m = re.search(r'/procedure-view/(\d+)', url)
        if m:
            return m.group(1), "sberbank-ast.ru"
    # b2b-center.ru
    if "b2b-center.ru" in domain:
        # –ü—Ä–∏–º–µ—Ä: https://www.b2b-center.ru/market/?action=show&tenderid=123456789
        qs = parse_qs(urlparse(url).query)
        reg_number = qs.get("tenderid", [None])[0]
        return reg_number, "b2b-center.ru"
    # roseltorg.ru
    if "roseltorg.ru" in domain:
        # –ü—Ä–∏–º–µ—Ä: https://www.roseltorg.ru/procedure/auction/view/procedure-cards/123456789
        m = re.search(r'/procedure-cards/(\d+)', url)
        if m:
            return m.group(1), "roseltorg.ru"
    # torgi.gov.ru
    if "torgi.gov.ru" in domain:
        # –ü—Ä–∏–º–µ—Ä: https://torgi.gov.ru/new/public/lot/view/123456789
        m = re.search(r'/lot/view/(\d+)', url)
        if m:
            return m.group(1), "torgi.gov.ru"
    # zakazrf.ru
    if "zakazrf.ru" in domain:
        # –ü—Ä–∏–º–µ—Ä: https://zakazrf.ru/tender/view/123456789
        m = re.search(r'/tender/view/(\d+)', url)
        if m:
            return m.group(1), "zakazrf.ru"
    # ... –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø–ª–æ—â–∞–¥–∫–∏ ...
    logging.warning(f"Could not extract reg_number/platform from url={url}")
    return None, None

class TenderGuruAPI:
    @staticmethod
    async def get_tender_by_number(reg_number):
        if not reg_number:
            logging.error("No reg_number provided to get_tender_by_number")
            return None
        params = {
            "regNumber": reg_number,
            "dtype": "json",
            "api_code": TENDER_GURU_API_KEY
        }
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
        log_api_request("TenderGuru", TENDERGURU_API_URL, params)
        logging.info(f"Requesting tender by number: {params}")
        async with aiohttp.ClientSession() as session:
            async with session.get(TENDERGURU_API_URL, params=params) as resp:
                logging.info(f"Tender API response status: {resp.status}")
                if resp.status == 200:
                    data = await resp.json(content_type=None)
                    # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API
                    log_api_response("TenderGuru", TENDERGURU_API_URL, params, data, resp.status)
                    logging.info(f"Tender API response: {data}")
                    items = None
                    if isinstance(data, dict):
                        items = data.get("Items")
                    elif isinstance(data, list):
                        # TenderGuru –∏–Ω–æ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫, –≥–¥–µ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç ‚Äî Total, –æ—Å—Ç–∞–ª—å–Ω—ã–µ ‚Äî —Ç–µ–Ω–¥–µ—Ä—ã
                        items = [d for d in data if isinstance(d, dict) and (d.get("ID") or d.get("TenderName") or d.get("TenderNumOuter"))]
                    if items and isinstance(items, list) and len(items) > 0:
                        item = items[0]
                        return {
                            "reg_number": reg_number,
                            "customer_name": item.get("Customer", "-"),
                            "purchase_subject": item.get("Name") or item.get("TenderName", "-"),
                            "price": item.get("Price", "-"),
                            "deadline": item.get("DateEnd") or item.get("EndTime", "-"),
                            "location": item.get("RegionName") or item.get("Region", "-")
                        }
                    else:
                        logging.warning(f"No tender found for reg_number {reg_number}")
                else:
                    logging.error(f"Failed to get tender by number {reg_number}: {resp.status}")
        return None

async def analyze_tender_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message and update.message.text:
        link = update.message.text.strip()
        reg_number = extract_tender_number(link)
        if not reg_number:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –Ω–æ–º–µ—Ä –∑–∞–∫—É–ø–∫–∏ –∏–∑ —Å—Å—ã–ª–∫–∏.")
            return
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –§–ó
        fz = None
        if "fz223" in link or "223" in link:
            fz = "fz223"
        card, files = await fetch_tender_card_and_docs(reg_number, fz)
        if not card:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫—É–ø–∫–µ.")
            return
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
        text = f"üìÑ <b>{card.get('TenderName', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b>\n"
        text += f"üí∞ <b>–¶–µ–Ω–∞:</b> {card.get('Price', '‚Äî')}\n"
        text += f"üè¢ <b>–ó–∞–∫–∞–∑—á–∏–∫:</b> {card.get('Customer', '‚Äî')}\n"
        text += f"üåç <b>–†–µ–≥–∏–æ–Ω:</b> {card.get('Region', '‚Äî')}\n"
        text += f"üèõÔ∏è <b>–ü–ª–æ—â–∞–¥–∫–∞:</b> {card.get('Etp', '‚Äî')}\n"
        text += f"‚è∞ <b>–û–∫–æ–Ω—á–∞–Ω–∏–µ –ø—Ä–∏—ë–º–∞ –∑–∞—è–≤–æ–∫:</b> {card.get('EndTime', '‚Äî')}\n"
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        keyboard = []
        for i, file in enumerate(files):
            keyboard.append([InlineKeyboardButton(f"üì• –°–∫–∞—á–∞—Ç—å {file['name']}", url=file['url'])])
        reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='HTML')

async def get_tender_documents(api_tender_info_url):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã —Ç–µ–Ω–¥–µ—Ä–∞ –ø–æ ApiTenderInfo URL.
    """
    if not api_tender_info_url:
        logging.warning("No ApiTenderInfo URL provided")
        return []
    
    logging.info(f"Requesting documents from: {api_tender_info_url}")
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
    log_api_request("TenderGuru", api_tender_info_url, {})
    
    async with aiohttp.ClientSession() as session:
        async with session.get(api_tender_info_url) as resp:
            logging.info(f"Documents API response status: {resp.status}")
            if resp.status == 200:
                data = await resp.json(content_type=None)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API
                log_api_response("TenderGuru", api_tender_info_url, {}, data, resp.status)
                
                docs = []
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API
                if isinstance(data, list) and len(data) > 0:
                    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º Total)
                    item = data[0]
                    if isinstance(item, dict):
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ docsXML
                        if 'docsXML' in item and isinstance(item['docsXML'], dict):
                            docs_data = item['docsXML']
                            if 'document' in docs_data and isinstance(docs_data['document'], list):
                                for doc in docs_data['document']:
                                    if isinstance(doc, dict) and 'link' in doc and 'name' in doc:
                                        docs.append({
                                            'url': doc['link'],
                                            'name': doc['name'],
                                            'size': doc.get('size', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                                        })
                                        logging.info(f"Found document: {doc['name']} -> {doc['link']}")
                
                # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                for key in ['files', 'attachments', 'docs', 'documents', 'download_links', 'documentation', 'Files', 'Documents']:
                    if key in data and isinstance(data[key], list):
                        docs.extend(data[key])
                        logging.info(f"Found {len(data[key])} documents in key '{key}'")
                
                # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤–ª–æ–∂–µ–Ω—ã –≤ Items
                if 'Items' in data and isinstance(data['Items'], list) and len(data['Items']) > 0:
                    item = data['Items'][0]
                    for key in ['files', 'attachments', 'docs', 'documents', 'download_links', 'documentation', 'Files', 'Documents']:
                        if key in item and isinstance(item[key], list):
                            docs.extend(item[key])
                            logging.info(f"Found {len(item[key])} documents in Items[0].{key}")
                
                logging.info(f"Total documents found: {len(docs)}")
                return docs
            else:
                logging.error(f"Failed to get documents: {resp.status}")
                return []

def extract_tender_number(url):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç regNumber –∏–ª–∏ id –∏–∑ —Å—Å—ã–ª–∫–∏ –Ω–∞ zakupki.gov.ru –∏–ª–∏ TenderGuru
    """
    if not url:
        return None
    parsed = urlparse(url)
    qs = parse_qs(parsed.query)
    for key in ["regNumber", "tend_num", "id", "purchaseNumber"]:
        if key in qs:
            return qs[key][0]
    m = re.search(r'(\d{11,})', url)
    if m:
        return m.group(1)
    return None

async def send_tender_card(update, context, tender_info, tender_number, source=None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É —Ç–µ–Ω–¥–µ—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏.
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
    if source:
        api_source = source
    else:
        api_source = tender_info.get('source', 'unknown')
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
    text = (
        f"üìÑ **–¢–µ–Ω–¥–µ—Ä ‚Ññ{tender_info['id']}**\n\n"
        f"üìù **–ü—Ä–µ–¥–º–µ—Ç:** {tender_info['name']}\n"
        f"üìç **–†–µ–≥–∏–æ–Ω:** {tender_info['region']}\n"
        f"üèóÔ∏è **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {tender_info['category']}\n"
        f"üí∞ **–ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞:** {tender_info['price']}\n"
        f"üìÖ **–î–µ–¥–ª–∞–π–Ω –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫:** {tender_info['deadline']}\n"
        f"üóìÔ∏è **–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:** {tender_info['published']}\n"
        f"üìé **–ü–ª–æ—â–∞–¥–∫–∞:** {tender_info['etp']}\n"
        f"üè¢ **–ó–∞–∫–∞–∑—á–∏–∫:** {tender_info['customer']}\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è Damia API
    if api_source == "damia" and tender_info.get('status'):
        text += f"üìä **–°—Ç–∞—Ç—É—Å:** {tender_info['status']}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
    if tender_info.get('url'):
        text += f"üîó [–û—Ç–∫—Ä—ã—Ç—å —Ç–µ–Ω–¥–µ—Ä]({tender_info['url']})\n"
    
    text += f"\nüìä **–ò—Å—Ç–æ—á–Ω–∏–∫:** {api_source.upper()}"
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ docsXML –∏–ª–∏ ApiTenderInfo URL)
    has_documents = False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ docsXML
    if tender_info.get('docs_xml') and isinstance(tender_info['docs_xml'], dict):
        docs_data = tender_info['docs_xml']
        if 'document' in docs_data and isinstance(docs_data['document'], list) and len(docs_data['document']) > 0:
            has_documents = True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ApiTenderInfo URL
    if tender_info.get('api_tender_info') and tender_info['api_tender_info'] != "‚Äî":
        has_documents = True
    
    if has_documents:
        keyboard.append([InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã", callback_data=f"download_docs_{tender_number}")])
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö API
    if api_source == "tenderguru":
        keyboard.extend([
            [InlineKeyboardButton("üîç Damia API", callback_data=f"damia_{tender_number}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É", callback_data=f"back_to_tender_{tender_number}")]
        ])
    elif api_source == "damia":
        keyboard.extend([
            [InlineKeyboardButton("üîç TenderGuru", callback_data=f"tenderguru_{tender_number}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É", callback_data=f"back_to_tender_{tender_number}")]
        ])
    else:
        # –ï—Å–ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–µ –∫–Ω–æ–ø–∫–∏
        keyboard.extend([
            [InlineKeyboardButton("üîç TenderGuru", callback_data=f"tenderguru_{tender_number}")],
            [InlineKeyboardButton("üîç Damia API", callback_data=f"damia_{tender_number}")]
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –ò–ù–ù)
    if tender_info.get('customers') and len(tender_info['customers']) > 0:
        customer_inn = tender_info['customers'][0].get('inn')
        if customer_inn:
            keyboard.append([InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞", callback_data=f"check_supplier_{tender_number}_{customer_inn}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if update.callback_query:
        await update.callback_query.edit_message_text(
            text, 
            reply_markup=reply_markup, 
            disable_web_page_preview=True, 
            parse_mode='Markdown'
        )
    elif update.message:
        await update.message.reply_text(
            text, 
            reply_markup=reply_markup, 
            disable_web_page_preview=True, 
            parse_mode='Markdown'
        )

async def download_documents_via_api(update, context, tender_id, tender_data=None):
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã —Ç–µ–Ω–¥–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É—è –º–æ–¥—É–ª—å downloader.py
    """
    query = update.callback_query
    await query.edit_message_text("‚è≥ –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–Ω–¥–µ—Ä–∞, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã
        if not tender_data:
            tender_data = await get_tender_info(tender_id)
        
        if not tender_data:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–Ω–¥–µ—Ä–µ.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ ApiTenderInfo URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        api_tender_info_url = None
        if isinstance(tender_data, dict):
            api_tender_info_url = tender_data.get('ApiTenderInfo') or tender_data.get('api_tender_info')
        elif isinstance(tender_data, list) and len(tender_data) > 0:
            api_tender_info_url = tender_data[0].get('ApiTenderInfo') or tender_data[0].get('api_tender_info')
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –¥–µ–ª–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        if api_tender_info_url and api_tender_info_url != "‚Äî":
            await query.edit_message_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –¥–æ–∫—É–º–µ–Ω—Ç—ã —Ç–µ–Ω–¥–µ—Ä–∞...")
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º URL, –¥–æ–±–∞–≤–ª—è—è API –∫–ª—é—á
            if 'api_code=' in api_tender_info_url:
                # –ó–∞–º–µ–Ω—è–µ–º –ø—É—Å—Ç–æ–π api_code –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª—é—á
                api_tender_info_url = api_tender_info_url.replace('api_code=', f'api_code={TENDER_GURU_API_KEY}')
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º api_code –ø–∞—Ä–∞–º–µ—Ç—Ä
                separator = '&' if '?' in api_tender_info_url else '?'
                api_tender_info_url = f"{api_tender_info_url}{separator}api_code={TENDER_GURU_API_KEY}"
            
            logging.info(f"Requesting documents from: {api_tender_info_url}")
            
            # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            async with aiohttp.ClientSession() as session:
                async with session.get(api_tender_info_url) as resp:
                    if resp.status == 200:
                        documents_data = await resp.json(content_type=None)
                        logging.info(f"Documents API response: {documents_data}")
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–Ω–¥–µ—Ä–∞ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
                        if isinstance(documents_data, list) and len(documents_data) > 0:
                            tender_data = documents_data[0]
                        elif isinstance(documents_data, dict):
                            tender_data = documents_data
                    else:
                        logging.error(f"Failed to get documents: {resp.status}")
        
        await query.edit_message_text("‚è≥ –°–∫–∞—á–∏–≤–∞—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é...")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥—É–ª—å downloader –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        result = await download_tender_documents(tender_data, tender_id)
        
        if not result['success']:
            error_msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã.\n"
            if result['errors']:
                error_msg += "\n".join(result['errors'][:3])  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –æ—à–∏–±–∫–∏
            await query.edit_message_text(error_msg)
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—Ä—Ö–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if result['archive_path'] and os.path.exists(result['archive_path']):
            with open(result['archive_path'], 'rb') as f:
                await context.bot.send_document(
                    chat_id=query.message.chat_id,
                    document=f,
                    filename=f"tender_{tender_id}_docs.zip"
                )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            success_msg = f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–∞!\n"
            success_msg += f"üìÑ –°–∫–∞—á–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {result['downloaded_files']} –∏–∑ {result['total_files']}"
            
            if result['errors']:
                success_msg += f"\n‚ö†Ô∏è –û—à–∏–±–∫–∏: {len(result['errors'])} —Ñ–∞–π–ª–æ–≤ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å"
            
            await query.edit_message_text(success_msg)
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞—Ä—Ö–∏–≤
            try:
                os.remove(result['archive_path'])
            except Exception as e:
                logging.error(f"Error removing temporary archive: {e}")
        else:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞—Ä—Ö–∏–≤ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏.")
            
    except Exception as e:
        logging.error(f"Error downloading documents via API: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏.")

async def download_documents(update, context, tender_id):
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã —Ç–µ–Ω–¥–µ—Ä–∞.
    """
    query = update.callback_query
    await query.edit_message_text("‚è≥ –°–∫–∞—á–∏–≤–∞—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é...")
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–∫–∞—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã
        archive_path = await download_all_files(tender_id)
        
        if archive_path and os.path.exists(archive_path):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—Ä—Ö–∏–≤
            with open(archive_path, 'rb') as f:
                await context.bot.send_document(
                    chat_id=query.message.chat_id,
                    document=f,
                    filename=f"tender_{tender_id}_docs.zip"
                )
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.remove(archive_path)
            await query.edit_message_text("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–∞!")
        else:
            await query.edit_message_text("‚ùå –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª—ã.")
    except Exception as e:
        logging.error(f"Error downloading documents: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏.")

async def wait_for_link_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–µ–Ω–¥–µ—Ä."""
    if update.message and update.message.text:
        link = update.message.text.strip()
        logging.info(f"Received tender link: {link}")
        await update.message.reply_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ–Ω–¥–µ—Ä...")
        tender_number = extract_tender_number(link)
        logging.info(f"Extracted tender number: {tender_number}")
        if not tender_number:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –Ω–æ–º–µ—Ä —Ç–µ–Ω–¥–µ—Ä–∞ –∏–∑ —Å—Å—ã–ª–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏.")
            return
        try:
            # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            cache_key = f"tenderguru_{tender_number}"
            tender_data = context.user_data.get(cache_key)
            if not tender_data:
                logging.info("Trying TenderGuru API first...")
                tender_data = await get_tender_info(tender_number)
                if tender_data:
                    context.user_data[cache_key] = tender_data
            if tender_data:
                logging.info("TenderGuru API returned data, parsing...")
                tender_info = parse_tender_info(tender_data)
                await send_tender_card(update, context, tender_info, tender_number)
            else:
                logging.info("TenderGuru API returned no data, trying Damia API...")
                damia_data = await DamiaAPI.get_tender_by_number(tender_number)
                if damia_data:
                    tender_info = parse_damia_tender_info(damia_data)
                    await send_tender_card(update, context, tender_info, tender_number)
                else:
                    await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–Ω–¥–µ—Ä–µ –≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö.")
        except Exception as e:
            logging.error(f"Error in wait_for_link_handler: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–µ–Ω–¥–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def download_all_files(reg_number):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –ø–æ reg_number —á–µ—Ä–µ–∑ TenderGuruAPI, —Å–∫–∞—á–∏–≤–∞–µ—Ç –∏—Ö, –∞—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç –≤ .zip –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –∞—Ä—Ö–∏–≤—É.
    """
    params = {
        "regNumber": reg_number,
        "dtype": "json",
        "api_code": TENDER_GURU_API_KEY
    }
    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
    log_api_request("TenderGuru", TENDERGURU_API_URL, params)
    logging.info(f"Requesting files for tender: {params}")
    async with aiohttp.ClientSession() as session:
        async with session.get(TENDERGURU_API_URL, params=params) as resp:
            logging.info(f"Files API response status: {resp.status}")
            if resp.status == 200:
                data = await resp.json(content_type=None)
                # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API
                log_api_response("TenderGuru", TENDERGURU_API_URL, params, data, resp.status)
                logging.info(f"Files API response: {data}")
                items = data.get("Items")
                if items and isinstance(items, list) and len(items) > 0:
                    item = items[0]
                    files = item.get("Files") or item.get("Documents") or item.get("Attachments")
                    if not files:
                        logging.warning(f"No files found for tender {reg_number}")
                        return None
                    temp_dir = tempfile.mkdtemp()
                    file_paths = []
                    for f in files:
                        url = f.get("Url") or f.get("url")
                        name = f.get("Name") or f.get("name") or os.path.basename(url)
                        if url:
                            file_path = os.path.join(temp_dir, name)
                            try:
                                async with session.get(url) as file_resp:
                                    logging.info(f"Downloading file: {url}, status: {file_resp.status}")
                                    if file_resp.status == 200:
                                        with open(file_path, "wb") as out_f:
                                            out_f.write(await file_resp.read())
                                        file_paths.append(file_path)
                                    else:
                                        logging.error(f"Failed to download file: {url}, status: {file_resp.status}")
                            except Exception as e:
                                logging.error(f"Exception while downloading file {url}: {e}")
                                continue
                    if not file_paths:
                        shutil.rmtree(temp_dir)
                        return None
                    archive_path = shutil.make_archive(temp_dir, 'zip', temp_dir)
                    shutil.rmtree(temp_dir)
                    logging.info(f"Created archive: {archive_path}")
                    return archive_path
            else:
                logging.error(f"Failed to get files for tender {reg_number}: {resp.status}")
    return None

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    if query is None:
        return
    await query.answer()
    data = query.data
    if data is None:
        return
    logging.info(f"Button pressed: {data}")
    if data.startswith("download_docs_"):
        tender_id = data.split("_")[2]
        cache_key = f"tenderguru_{tender_id}"
        tender_data = context.user_data.get(cache_key)
        if not tender_data:
            tender_data = await get_tender_info(tender_id)
            if tender_data:
                context.user_data[cache_key] = tender_data
        await download_documents_via_api(update, context, tender_id, tender_data)
    elif data.startswith("tenderguru_"):
        tender_number = data.split("_", 1)[1]
        cache_key = f"tenderguru_{tender_number}"
        tender_data = context.user_data.get(cache_key)
        if not tender_data:
            tender_data = await get_tender_info(tender_number)
            if tender_data:
                context.user_data[cache_key] = tender_data
        if tender_data:
            tender_info = parse_tender_info(tender_data)
            await send_tender_card(update, context, tender_info, tender_number, source="tenderguru")
        else:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ TenderGuru API")
    elif data.startswith("damia_"):
        # –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ Damia API
        tender_number = data.split("_", 1)[1]
        logging.info(f"Analyzing tender {tender_number} via Damia API")
        
        await query.edit_message_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —á–µ—Ä–µ–∑ Damia API...")
        
        damia_data = await DamiaAPI.get_tender_by_number(tender_number)
        if damia_data:
            logging.info("Damia API returned data")
            tender_info = parse_damia_tender_info(damia_data)
            await send_tender_card(update, context, tender_info, tender_number, source="damia")
        else:
            logging.warning("Damia API returned no data")
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ Damia API")
            
    elif data.startswith("check_supplier_"):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        parts = data.split("_")
        if len(parts) >= 4:
            tender_number = parts[2]
            inn = parts[3]
            logging.info(f"Checking supplier with INN: {inn}")
            
            await query.edit_message_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤ —Ä–µ–µ—Å—Ç—Ä–∞—Ö...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–µ—Å—Ç—Ä–∞—Ö
            rnp_result = await DamiaAPI.check_supplier_rnp(inn)
            sro_result = await DamiaAPI.check_supplier_sro(inn)
            eruz_result = await DamiaAPI.check_supplier_eruz(inn)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report = f"üìã **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –ò–ù–ù {inn}:**\n\n"
            
            if rnp_result:
                report += "üî¥ **–†–ù–ü (–†–µ–µ—Å—Ç—Ä –Ω–µ–¥–æ–±—Ä–æ—Å–æ–≤–µ—Å—Ç–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤):**\n"
                report += f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(rnp_result) if isinstance(rnp_result, list) else 1}\n\n"
            else:
                report += "‚úÖ **–†–ù–ü:** –ó–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n\n"
                
            if sro_result:
                report += "üü° **–°–†–û (–°–∞–º–æ—Ä–µ–≥—É–ª–∏—Ä—É–µ–º—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏):**\n"
                report += f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(sro_result) if isinstance(sro_result, list) else 1}\n\n"
            else:
                report += "‚úÖ **–°–†–û:** –ó–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n\n"
                
            if eruz_result:
                report += "üü° **–ï–†–£–ó (–ï–¥–∏–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∑–∞–∫—É–ø–æ–∫):**\n"
                report += f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(eruz_result) if isinstance(eruz_result, list) else 1}\n\n"
            else:
                report += "‚úÖ **–ï–†–£–ó:** –ó–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n\n"
            
            # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ç–µ–Ω–¥–µ—Ä—É", callback_data=f"back_to_tender_{tender_number}")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(report, reply_markup=reply_markup, parse_mode='Markdown')
        
    elif data.startswith("back_to_tender_"):
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –∫–∞—Ä—Ç–æ—á–∫–µ —Ç–µ–Ω–¥–µ—Ä–∞
        tender_number = data.split("_", 3)[3]
        logging.info(f"Returning to tender card: {tender_number}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ API
        keyboard = [
            [InlineKeyboardButton("üîç TenderGuru", callback_data=f"tenderguru_{tender_number}")],
            [InlineKeyboardButton("üîç Damia API", callback_data=f"damia_{tender_number}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üîç –í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–Ω–¥–µ—Ä–∞:",
            reply_markup=reply_markup
        )
    elif data == "wait_for_link":
        await query.edit_message_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ–Ω–¥–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
    elif data == "wait_for_link_tenderguru":
        await query.edit_message_text("üîç **TenderGuru**\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ–Ω–¥–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ TenderGuru API.")
    elif data == "wait_for_link_damia":
        await query.edit_message_text("üîç **Damia API**\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ–Ω–¥–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ Damia API.")

async def get_tender_info(tender_number):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–Ω–¥–µ—Ä–µ –∏–∑ TenderGuru API.
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
    if not TENDER_GURU_API_KEY or TENDER_GURU_API_KEY == "your-tenderguru-api-key-here":
        error_msg = "API –∫–ª—é—á TenderGuru –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TENDER_GURU_API_KEY –≤ config.py"
        print(f"\n‚ùå {error_msg}", flush=True)
        logging.error(error_msg)
        return None
    
    print(f"\nüîë TenderGuru API Key: {TENDER_GURU_API_KEY[:10]}...", flush=True)
    logging.info(f"TenderGuru API Key: {TENDER_GURU_API_KEY[:10]}...")
    
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    params_variants = [
        {
            "key": TENDER_GURU_API_KEY,
            "tender": tender_number
        },
        {
            "key": TENDER_GURU_API_KEY,
            "regNumber": tender_number
        },
        {
            "key": TENDER_GURU_API_KEY,
            "tender": tender_number,
            "dtype": "json"
        },
        {
            "key": TENDER_GURU_API_KEY,
            "regNumber": tender_number,
            "dtype": "json"
        },
        {
            "api_code": TENDER_GURU_API_KEY,
            "tender": tender_number
        },
        {
            "api_code": TENDER_GURU_API_KEY,
            "regNumber": tender_number
        },
        {
            "api_code": TENDER_GURU_API_KEY,
            "tender": tender_number,
            "dtype": "json"
        },
        {
            "api_code": TENDER_GURU_API_KEY,
            "regNumber": tender_number,
            "dtype": "json"
        },
        {
            "api_code": TENDER_GURU_API_KEY,
            "id": tender_number
        },
        {
            "api_code": TENDER_GURU_API_KEY,
            "id": tender_number,
            "dtype": "json"
        }
    ]
    
    for i, params in enumerate(params_variants):
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
        log_api_request("TenderGuru", TENDERGURU_API_URL, params)
        logging.info(f"Trying TenderGuru API variant {i+1}: {params}")
        
        async with aiohttp.ClientSession() as session:
            async with session.get(TENDERGURU_API_URL, params=params) as resp:
                logging.info(f"TenderGuru API response status: {resp.status}")
                if resp.status == 200:
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                        response_text = await resp.text()
                        print(f"\nüîç TenderGuru API Raw Response: {response_text}", flush=True)
                        logging.info(f"TenderGuru API raw response: {response_text}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø—É—Å—Ç–æ–π
                        if not response_text.strip():
                            print(f"‚ö†Ô∏è Empty response from TenderGuru API for tender_number {tender_number}", flush=True)
                            logging.warning(f"Empty response from TenderGuru API for tender_number {tender_number}")
                            continue
                        
                        # –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å JSON
                        data = await resp.json(content_type=None)
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç
                        log_api_response("TenderGuru", TENDERGURU_API_URL, params, data, resp.status)
                        
                        if isinstance(data, dict):
                            print(f"\nüìã TenderGuru API response keys: {list(data.keys())}", flush=True)
                            logging.info(f"TenderGuru API response keys: {list(data.keys())}")
                            
                            # –ò—â–µ–º —Ç–µ–Ω–¥–µ—Ä –≤ —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–ª—é—á–∞—Ö
                            for key in [tender_number, "Items", "items", "data", "result", "tender", "tenders"]:
                                if key in data:
                                    print(f"\n‚úÖ Found data in key: {key}", flush=True)
                                    logging.info(f"Found data in key: {key}")
                                    if key == tender_number:
                                        return data[key]
                                    elif isinstance(data[key], list) and len(data[key]) > 0:
                                        return data[key][0]
                                    elif isinstance(data[key], dict):
                                        return data[key]
                            
                            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∫–ª—é—á–∞—Ö, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–ª—é—á–∏
                            for key, value in data.items():
                                if isinstance(value, dict) and any(field in value for field in ['TenderName', 'Name', 'ID', 'id']):
                                    print(f"\n‚úÖ Found tender data in key: {key}", flush=True)
                                    logging.info(f"Found tender data in key: {key}")
                                    return value
                                elif isinstance(value, list) and len(value) > 0 and isinstance(value[0], dict):
                                    if any(field in value[0] for field in ['TenderName', 'Name', 'ID', 'id']):
                                        print(f"\n‚úÖ Found tender data in list key: {key}", flush=True)
                                        logging.info(f"Found tender data in list key: {key}")
                                        return value[0]
                        
                        elif isinstance(data, list) and len(data) > 0:
                            print(f"\n‚úÖ TenderGuru API returned list with {len(data)} items", flush=True)
                            logging.info(f"TenderGuru API returned list with {len(data)} items")
                            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã, –≥–¥–µ —Ç–æ–ª—å–∫–æ –∫–ª—é—á 'Total'
                            for item in data:
                                if isinstance(item, dict) and any(k in item for k in ['ID', 'TenderName', 'Name', 'id']):
                                    print(f"\n‚úÖ Found tender item in list: {item}", flush=True)
                                    logging.info(f"Found tender item in list: {item}")
                                    return item
                            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
                            return data[0]
                        
                        print(f"\n‚ö†Ô∏è No tender found in TenderGuru API response for tender_number {tender_number}", flush=True)
                        logging.warning(f"No tender found in TenderGuru API response for tender_number {tender_number}")
                        
                    except json.JSONDecodeError as e:
                        print(f"‚ùå JSON decode error from TenderGuru API variant {i+1}: {e}", flush=True)
                        print(f"Response text: {response_text}", flush=True)
                        logging.error(f"JSON decode error from TenderGuru API variant {i+1}: {e}")
                        logging.error(f"Response text: {response_text}")
                        continue
                    except Exception as e:
                        print(f"‚ùå Error processing TenderGuru API response variant {i+1}: {e}", flush=True)
                        logging.error(f"Error processing TenderGuru API response variant {i+1}: {e}")
                        continue
                else:
                    print(f"‚ùå Failed to get tender from TenderGuru API variant {i+1}: {resp.status}", flush=True)
                    logging.error(f"Failed to get tender from TenderGuru API variant {i+1}: {resp.status}")
    
    logging.warning(f"All TenderGuru API variants failed for tender_number {tender_number}")
    return None

def log_api_request(api_name, endpoint, params):
    """
    –õ–æ–≥–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –∫ API –≤ —Ñ–∞–π–ª –∏ –∫–æ–Ω—Å–æ–ª—å
    """
    timestamp = logging.Formatter().formatTime(logging.LogRecord('', 0, '', 0, '', (), None))
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤ —Ñ–∞–π–ª
    api_logger.info(f"=== {api_name.upper()} API REQUEST ===")
    api_logger.info(f"Timestamp: {timestamp}")
    api_logger.info(f"Endpoint: {endpoint}")
    api_logger.info(f"Params: {json.dumps(params, ensure_ascii=False, indent=2)}")
    api_logger.info("=" * 50)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
    print(f"\n{'='*60}", flush=True)
    print(f"üöÄ {api_name.upper()} API REQUEST", flush=True)
    print(f"{'='*60}", flush=True)
    print(f"üìÖ Timestamp: {timestamp}", flush=True)
    print(f"üì° Endpoint: {endpoint}", flush=True)
    print(f"üîß Params: {json.dumps(params, ensure_ascii=False, indent=2)}", flush=True)
    print(f"{'='*60}\n", flush=True)
    
    # –¢–∞–∫–∂–µ –ª–æ–≥–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–≥–µ—Ä
    logging.info(f"=== {api_name.upper()} API REQUEST ===")
    logging.info(f"Timestamp: {timestamp}")
    logging.info(f"Endpoint: {endpoint}")
    logging.info(f"Params: {json.dumps(params, ensure_ascii=False, indent=2)}")
    logging.info("=" * 50)

def log_api_response(api_name, endpoint, params, response_data, status_code=200):
    """
    –õ–æ–≥–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã API –≤ —Ñ–∞–π–ª –∏ –∫–æ–Ω—Å–æ–ª—å
    """
    timestamp = logging.Formatter().formatTime(logging.LogRecord('', 0, '', 0, '', (), None))
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤ —Ñ–∞–π–ª
    api_logger.info(f"=== {api_name.upper()} API RESPONSE ===")
    api_logger.info(f"Timestamp: {timestamp}")
    api_logger.info(f"Endpoint: {endpoint}")
    api_logger.info(f"Params: {json.dumps(params, ensure_ascii=False, indent=2)}")
    api_logger.info(f"Status: {status_code}")
    api_logger.info(f"Response: {json.dumps(response_data, ensure_ascii=False, indent=2)}")
    api_logger.info("=" * 50)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
    print(f"\n{'='*60}", flush=True)
    print(f"üîç {api_name.upper()} API RESPONSE", flush=True)
    print(f"{'='*60}", flush=True)
    print(f"üìÖ Timestamp: {timestamp}", flush=True)
    print(f"üì° Endpoint: {endpoint}", flush=True)
    print(f"üîß Params: {json.dumps(params, ensure_ascii=False, indent=2)}", flush=True)
    print(f"üìä Status: {status_code}", flush=True)
    print(f"üìÑ Response: {json.dumps(response_data, ensure_ascii=False, indent=2)}", flush=True)
    print(f"{'='*60}\n", flush=True)
    
    # –¢–∞–∫–∂–µ –ª–æ–≥–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–≥–µ—Ä
    logging.info(f"=== {api_name.upper()} API RESPONSE ===")
    logging.info(f"Timestamp: {timestamp}")
    logging.info(f"Endpoint: {endpoint}")
    logging.info(f"Params: {json.dumps(params, ensure_ascii=False, indent=2)}")
    logging.info(f"Status: {status_code}")
    logging.info(f"Response: {json.dumps(response_data, ensure_ascii=False, indent=2)}")
    logging.info("=" * 50)
    
    # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ 200, –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –æ—Ç–¥–µ–ª—å–Ω–æ
    if status_code != 200:
        api_logger.error(f"API ERROR - {api_name}: Status {status_code}")
        api_logger.error(f"Endpoint: {endpoint}")
        api_logger.error(f"Params: {json.dumps(params, ensure_ascii=False, indent=2)}")
        api_logger.error(f"Response: {json.dumps(response_data, ensure_ascii=False, indent=2)}")

def parse_tender_info(data):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Ç–µ–Ω–¥–µ—Ä–∞ –∏–∑ TenderGuru API –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è UI-–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –≤–æ–∑–º–æ–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
    """
    print(f"\nüîç Parsing TenderGuru data: {json.dumps(data, ensure_ascii=False, indent=2)}", flush=True)
    logging.info(f"Parsing TenderGuru data: {json.dumps(data, ensure_ascii=False, indent=2)}")
    
    # –í—ã–≤–æ–¥–∏–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏
    print(f"\nüìã Available keys in TenderGuru data: {list(data.keys())}", flush=True)
    logging.info(f"Available keys in TenderGuru data: {list(data.keys())}")
    
    def safe_get(key, default="‚Äî"):
        value = data.get(key)
        if value is None or value == "":
            return default
        return str(value)

    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ü–µ–Ω—É –≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—è—Ö
    price_raw = None
    for price_key in ['Price', 'price', 'Amount', 'amount', 'Sum', 'sum']:
        if price_key in data:
            price_raw = data[price_key]
            break
    
    if price_raw and str(price_raw).replace('.', '').replace(',', '').isdigit():
        try:
            price = f"{int(float(str(price_raw).replace(',', ''))):,} ‚ÇΩ".replace(",", " ")
        except:
            price = f"{price_raw} ‚ÇΩ"
    else:
        price = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—è—Ö
    name = None
    for name_key in ['TenderName', 'Name', 'name', 'Title', 'title', 'Subject', 'subject']:
        if name_key in data:
            name = data[name_key]
            break
    
    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ä–µ–≥–∏–æ–Ω –≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—è—Ö
    region = None
    for region_key in ['Region', 'region', 'RegionName', 'regionName', 'Location', 'location']:
        if region_key in data:
            region = data[region_key]
            break
    
    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∑–∞–∫–∞–∑—á–∏–∫–∞ –≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—è—Ö
    customer = None
    for customer_key in ['Customer', 'customer', 'CustomerName', 'customerName', 'Client', 'client']:
        if customer_key in data:
            customer = data[customer_key]
            break
    
    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≠–¢–ü –≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—è—Ö
    etp = None
    for etp_key in ['Etp', 'etp', 'EtpName', 'etpName', 'Platform', 'platform']:
        if etp_key in data:
            etp = data[etp_key]
            break
    
    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ URL –≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—è—Ö
    url = None
    for url_key in ['TenderLinkInner', 'Url', 'url', 'Link', 'link', 'TenderLink', 'tenderLink']:
        if url_key in data:
            url = data[url_key]
            break
    
    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ ID –≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—è—Ö
    tender_id = None
    for id_key in ['ID', 'id', 'TenderID', 'tenderID', 'Number', 'number']:
        if id_key in data:
            tender_id = data[id_key]
            break

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –í–°–Æ –¥–æ—Å—Ç—É–ø–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    tender_info = {
        "id": safe_get('ID') if tender_id is None else str(tender_id),
        "name": safe_get('TenderName') if name is None else str(name),
        "region": safe_get('Region') if region is None else str(region),
        "category": safe_get('Category'),
        "price": price,
        "deadline": safe_get('EndTime'),
        "published": safe_get('Date'),
        "etp": safe_get('Etp') if etp is None else str(etp),
        "url": safe_get('TenderLinkInner') if url is None else str(url),
        "customer": safe_get('Customer') if customer is None else str(customer),
        "tender_num_outer": safe_get('TenderNumOuter'),
        "fz": safe_get('Fz'),
        "api_tender_info": safe_get('ApiTenderInfo'),
        "user_id": safe_get('User_id'),
        "search_fragment": data.get('searchFragmentXML', {}),
        "source": "tenderguru",
        "raw_data": data,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        "docs_xml": data.get('docsXML', {}),
        "api_protokol_info": safe_get('ApiProtokolInfo'),
        "api_pred_info": safe_get('ApiPredInfo'),
        "api_contract_info": safe_get('ApiContractInfo'),
        "api_izm_info": safe_get('ApiIzmInfo'),
        "api_char_link_tender": safe_get('ApiCharLinkTender'),
        "api_char_link_tender_vcontract": safe_get('ApiCharLinkTenderVcontract')
    }

    print(f"\n‚úÖ Extracted TenderGuru info: {json.dumps(tender_info, ensure_ascii=False, indent=2)}", flush=True)
    logging.info(f"Extracted TenderGuru data: {json.dumps(tender_info, ensure_ascii=False, indent=2)}")
    
    return tender_info

class DamiaAPI:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API-–ó–∞–∫—É–ø–∫–∏ (damia.ru)
    """
    @staticmethod
    async def get_tender_by_number(reg_number):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫—É–ø–∫–µ –ø–æ –Ω–æ–º–µ—Ä—É –∏–∑–≤–µ—â–µ–Ω–∏—è.
        """
        if not reg_number:
            logging.error("No reg_number provided to DamiaAPI.get_tender_by_number")
            return None
        
        params = {
            "regn": reg_number,
            "key": DAMIA_API_KEY
        }
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
        log_api_request("Damia", f"{DAMIA_API_URL}/zakupka", params)
        logging.info(f"Requesting tender from Damia API: {params}")
        
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{DAMIA_API_URL}/zakupka", params=params) as resp:
                logging.info(f"Damia API response status: {resp.status}")
                if resp.status == 200:
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                        response_text = await resp.text()
                        print(f"\nüîç Damia API Raw Response: {response_text}", flush=True)
                        logging.info(f"Damia API raw response: {response_text}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø—É—Å—Ç–æ–π
                        if not response_text.strip():
                            print(f"‚ö†Ô∏è Empty response from Damia API for reg_number {reg_number}", flush=True)
                            logging.warning(f"Empty response from Damia API for reg_number {reg_number}")
                            return None
                        
                        # –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å JSON
                        data = await resp.json(content_type=None)
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç
                        log_api_response("Damia", f"{DAMIA_API_URL}/zakupka", params, data, resp.status)
                        
                        if reg_number in data:
                            tender_data = data[reg_number]
                            return tender_data
                        else:
                            logging.warning(f"No tender found in Damia API for reg_number {reg_number}")
                            
                    except json.JSONDecodeError as e:
                        logging.error(f"JSON decode error from Damia API: {e}")
                        logging.error(f"Response text: {response_text}")
                        return None
                    except Exception as e:
                        logging.error(f"Error processing Damia API response: {e}")
                        return None
                else:
                    logging.error(f"Failed to get tender from Damia API {reg_number}: {resp.status}")
        return None

    @staticmethod
    async def search_tenders(query, from_date=None, to_date=None, region=None, min_price=None, max_price=None):
        """
        –ü–æ–∏—Å–∫ –∑–∞–∫—É–ø–æ–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.
        """
        params = {
            "q": query,
            "key": DAMIA_API_KEY
        }
        
        if from_date:
            params["from_date"] = from_date
        if to_date:
            params["to_date"] = to_date
        if region:
            params["region"] = region
        if min_price:
            params["min_price"] = min_price
        if max_price:
            params["max_price"] = max_price
            
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
        log_api_request("Damia", f"{DAMIA_API_URL}/zsearch", params)
        logging.info(f"Searching tenders in Damia API: {params}")
        
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{DAMIA_API_URL}/zsearch", params=params) as resp:
                if resp.status == 200:
                    data = await resp.json(content_type=None)
                    log_api_response("Damia", f"{DAMIA_API_URL}/zsearch", params, data, resp.status)
                    return data
                else:
                    logging.error(f"Failed to search tenders in Damia API: {resp.status}")
        return None

    @staticmethod
    async def check_supplier_rnp(inn):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤ —Ä–µ–µ—Å—Ç—Ä–µ –Ω–µ–¥–æ–±—Ä–æ—Å–æ–≤–µ—Å—Ç–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤.
        """
        params = {
            "inn": inn,
            "key": DAMIA_API_KEY
        }
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
        log_api_request("Damia", f"{DAMIA_API_URL}/rnp", params)
        
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{DAMIA_API_URL}/rnp", params=params) as resp:
                if resp.status == 200:
                    data = await resp.json(content_type=None)
                    log_api_response("Damia", f"{DAMIA_API_URL}/rnp", params, data, resp.status)
                    return data
                else:
                    logging.error(f"Failed to check RNP in Damia API: {resp.status}")
        return None

    @staticmethod
    async def check_supplier_sro(req):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤ —Ä–µ–µ—Å—Ç—Ä–µ —Å–∞–º–æ—Ä–µ–≥—É–ª–∏—Ä—É–µ–º—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π.
        """
        params = {
            "req": req,
            "key": DAMIA_API_KEY
        }
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
        log_api_request("Damia", f"{DAMIA_API_URL}/sro", params)
        
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{DAMIA_API_URL}/sro", params=params) as resp:
                if resp.status == 200:
                    data = await resp.json(content_type=None)
                    log_api_response("Damia", f"{DAMIA_API_URL}/sro", params, data, resp.status)
                    return data
                else:
                    logging.error(f"Failed to check SRO in Damia API: {resp.status}")
        return None

    @staticmethod
    async def check_supplier_eruz(req):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤ –µ–¥–∏–Ω–æ–º —Ä–µ–µ—Å—Ç—Ä–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∑–∞–∫—É–ø–æ–∫.
        """
        params = {
            "req": req,
            "key": DAMIA_API_KEY
        }
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
        log_api_request("Damia", f"{DAMIA_API_URL}/eruz", params)
        
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{DAMIA_API_URL}/eruz", params=params) as resp:
                if resp.status == 200:
                    data = await resp.json(content_type=None)
                    log_api_response("Damia", f"{DAMIA_API_URL}/eruz", params, data, resp.status)
                    return data
                else:
                    logging.error(f"Failed to check ERUZ in Damia API: {resp.status}")
        return None

def parse_damia_tender_info(data):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–µ–Ω–¥–µ—Ä–∞ –∏–∑ Damia API –≤ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –≤–æ–∑–º–æ–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
    """
    def safe_get(obj, key, default="‚Äî"):
        if isinstance(obj, dict):
            return obj.get(key) or default
        return default

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    region = safe_get(data, '–†–µ–≥–∏–æ–Ω')
    fz = safe_get(data, '–§–ó')
    date_publ = safe_get(data, '–î–∞—Ç–∞–ü—É–±–ª')
    date_okonch = safe_get(data, '–î–∞—Ç–∞–û–∫–æ–Ω—á')
    date_nach = safe_get(data, '–î–∞—Ç–∞–ù–∞—á')
    time_nach = safe_get(data, '–í—Ä–µ–º—è–ù–∞—á')
    time_okonch = safe_get(data, '–í—Ä–µ–º—è–û–∫–æ–Ω—á')
    date_rassm = safe_get(data, '–î–∞—Ç–∞–†–∞—Å—Å–º')
    date_aukts = safe_get(data, '–î–∞—Ç–∞–ê—É–∫—Ü')
    time_aukts = safe_get(data, '–í—Ä–µ–º—è–ê—É–∫—Ü')
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑—á–∏–∫–µ (–ø–æ–ª–Ω–∞—è)
    zakazchik = data.get('–ó–∞–∫–∞–∑—á–∏–∫', [])
    customer_info = []
    if isinstance(zakazchik, list):
        for cust in zakazchik:
            customer_info.append({
                "ogrn": safe_get(cust, '–û–ì–†–ù'),
                "inn": safe_get(cust, '–ò–ù–ù'),
                "name_full": safe_get(cust, '–ù–∞–∏–º–ü–æ–ª–Ω'),
                "name_short": safe_get(cust, '–ù–∞–∏–º–°–æ–∫—Ä'),
                "address": safe_get(cust, '–ê–¥—Ä–µ—Å–ü–æ–ª–Ω'),
                "head_fio": safe_get(cust, '–†—É–∫–§–ò–û'),
                "head_inn": safe_get(cust, '–†—É–∫–ò–ù–ù–§–õ')
            })
    elif isinstance(zakazchik, dict):
        customer_info.append({
            "ogrn": safe_get(zakazchik, '–û–ì–†–ù'),
            "inn": safe_get(zakazchik, '–ò–ù–ù'),
            "name_full": safe_get(zakazchik, '–ù–∞–∏–º–ü–æ–ª–Ω'),
            "name_short": safe_get(zakazchik, '–ù–∞–∏–º–°–æ–∫—Ä'),
            "address": safe_get(zakazchik, '–ê–¥—Ä–µ—Å–ü–æ–ª–Ω'),
            "head_fio": safe_get(zakazchik, '–†—É–∫–§–ò–û'),
            "head_inn": safe_get(zakazchik, '–†—É–∫–ò–ù–ù–§–õ')
        })
    
    # –†–∞–∑–º–µ—â–∞—é—â–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è
    razm_org = data.get('–†–∞–∑–º–û—Ä–≥', {})
    razm_org_info = {
        "ogrn": safe_get(razm_org, '–û–ì–†–ù'),
        "inn": safe_get(razm_org, '–ò–ù–ù'),
        "name_full": safe_get(razm_org, '–ù–∞–∏–º–ü–æ–ª–Ω'),
        "name_short": safe_get(razm_org, '–ù–∞–∏–º–°–æ–∫—Ä'),
        "address": safe_get(razm_org, '–ê–¥—Ä–µ—Å–ü–æ–ª–Ω'),
        "head_fio": safe_get(razm_org, '–†—É–∫–§–ò–û'),
        "head_inn": safe_get(razm_org, '–†—É–∫–ò–ù–ù–§–õ')
    }
    
    # –ö–æ–Ω—Ç–∞–∫—Ç—ã
    kontakty = data.get('–ö–æ–Ω—Ç–∞–∫—Ç—ã', {})
    contacts_info = {
        "resp_person": safe_get(kontakty, '–û—Ç–≤–õ–∏—Ü–æ'),
        "phone": safe_get(kontakty, '–¢–µ–ª–µ—Ñ–æ–Ω'),
        "email": safe_get(kontakty, 'Email')
    }
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–µ (–ø–æ–ª–Ω–∞—è)
    produkt = data.get('–ü—Ä–æ–¥—É–∫—Ç', {})
    product_info = {
        "okpd": safe_get(produkt, '–û–ö–ü–î'),
        "name": safe_get(produkt, '–ù–∞–∑–≤–∞–Ω–∏–µ'),
        "objects": produkt.get('–û–±—ä–µ–∫—Ç—ã–ó–∞–∫', [])
    }
    
    # –ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ (–ø–æ–ª–Ω–∞—è)
    nach_cena = data.get('–ù–∞—á–¶–µ–Ω–∞', {})
    price_info = {
        "amount": safe_get(nach_cena, '–°—É–º–º–∞'),
        "currency_code": safe_get(nach_cena, '–í–∞–ª—é—Ç–∞–ö–æ–¥'),
        "currency_name": safe_get(nach_cena, '–í–∞–ª—é—Ç–∞–ù–∞–∏–º', '–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å')
    }
    
    # –û–±–µ—Å–ø–µ—á–µ–Ω–∏—è
    obesp_uchast = data.get('–û–±–µ—Å–ø–£—á–∞—Å—Ç', {})
    obesp_isp = data.get('–û–±–µ—Å–ø–ò—Å–ø', {})
    obesp_garant = data.get('–û–±–µ—Å–ø–ì–∞—Ä–∞–Ω—Ç', {})
    
    # –≠–¢–ü
    etp = data.get('–≠–¢–ü', {})
    etp_info = {
        "code": safe_get(etp, '–ö–æ–¥'),
        "name": safe_get(etp, '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'),
        "url": safe_get(etp, 'Url')
    }
    
    # –î–æ–∫—É–º–µ–Ω—Ç—ã (–ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
    documents = data.get('–î–æ–∫—É–º–µ–Ω—Ç—ã', [])
    docs_info = []
    for doc in documents:
        docs_info.append({
            "name": safe_get(doc, '–ù–∞–∑–≤–∞–Ω–∏–µ'),
            "date": safe_get(doc, '–î–∞—Ç–∞–†–∞–∑–º'),
            "edition": safe_get(doc, '–†–µ–¥–∞–∫—Ü–∏—è'),
            "files": doc.get('–§–∞–π–ª—ã', [])
        })
    
    # –ü—Ä–æ—Ç–æ–∫–æ–ª
    protokol = data.get('–ü—Ä–æ—Ç–æ–∫–æ–ª', {})
    protocol_info = {
        "type": safe_get(protokol, '–¢–∏–ø'),
        "number": safe_get(protokol, '–ù–æ–º–µ—Ä'),
        "date": safe_get(protokol, '–î–∞—Ç–∞'),
        "applications": protokol.get('–ó–∞—è–≤–∫–∏', []),
        "additional_info": safe_get(protokol, '–î–æ–ø–ò–Ω—Ñ–æ'),
        "url": safe_get(protokol, 'Url')
    }
    
    # –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã
    kontrakty = data.get('–ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã', [])
    
    # –°—Ç–∞—Ç—É—Å
    status = data.get('–°—Ç–∞—Ç—É—Å', {})
    status_info = {
        "status": safe_get(status, '–°—Ç–∞—Ç—É—Å'),
        "reason": safe_get(status, '–ü—Ä–∏—á–∏–Ω–∞'),
        "date": safe_get(status, '–î–∞—Ç–∞')
    }
    
    # –£—Å–ª–æ–≤–∏—è
    usloviya = data.get('–£—Å–ª–æ–≤–∏—è', {})
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if price_info["amount"] and str(price_info["amount"]).replace('.', '').isdigit():
        try:
            price_display = f"{float(price_info['amount']):,.0f} ‚ÇΩ".replace(",", " ")
        except:
            price_display = f"{price_info['amount']} {price_info['currency_name']}"
    else:
        price_display = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
    tender_info = {
        "id": data.get('–†–µ–≥–ù–æ–º–µ—Ä', '‚Äî'),
        "name": product_info["name"],
        "region": region,
        "category": f"–§–ó-{fz}" if fz else "‚Äî",
        "price": price_display,
        "deadline": date_okonch,
        "published": date_publ,
        "etp": etp_info["name"],
        "url": etp_info["url"],
        "customer": customer_info[0]["name_full"] if customer_info else "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
        "status": status_info["status"],
        "source": "damia",
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        "fz": fz,
        "date_start": date_nach,
        "time_start": time_nach,
        "time_end": time_okonch,
        "date_consideration": date_rassm,
        "date_auction": date_aukts,
        "time_auction": time_aukts,
        "customers": customer_info,
        "razm_org": razm_org_info,
        "contacts": contacts_info,
        "product": product_info,
        "price_details": price_info,
        "obesp_uchast": obesp_uchast,
        "obesp_isp": obesp_isp,
        "obesp_garant": obesp_garant,
        "etp_details": etp_info,
        "documents": docs_info,
        "protocol": protocol_info,
        "contracts": kontrakty,
        "status_details": status_info,
        "conditions": usloviya,
        "smp_sono": data.get('–°–ú–ü–∏–°–û–ù–û', False),
        "sposob_razm": safe_get(data, '–°–ø–æ—Å–æ–±–†–∞–∑–º'),
        "razm_rol": safe_get(data, '–†–∞–∑–º–†–æ–ª—å'),
        "mesto_postav": safe_get(data, '–ú–µ—Å—Ç–æ–ü–æ—Å—Ç–∞–≤'),
        "srok_postav": safe_get(data, '–°—Ä–æ–∫–ü–æ—Å—Ç–∞–≤'),
        "avans_procent": data.get('–ê–≤–∞–Ω—Å–ü—Ä–æ—Ü–µ–Ω—Ç', 0),
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        "raw_data": data
    }

    # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    logging.info(f"Extracted Damia data: {json.dumps(tender_info, ensure_ascii=False, indent=2)}")
    
    return tender_info

async def fetch_tender_card_and_docs(reg_number, fz=None):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É —Ç–µ–Ω–¥–µ—Ä–∞ –∏ —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞–∫—É–ø–∫–∏ (reg_number) –∏–ª–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É id.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (card, files), –≥–¥–µ card ‚Äî —Å–ª–æ–≤–∞—Ä—å —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ–π, files ‚Äî —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ (dict: name, url).
    """
    params = {"dtype": "json", "api_code": TENDER_GURU_API_KEY}
    if reg_number.isdigit() and len(reg_number) > 10:
        params["tend_num"] = reg_number
    else:
        params["id"] = reg_number
    if fz == "fz223":
        params["fz"] = "fz223"
    async with aiohttp.ClientSession() as session:
        async with session.get(TENDERGURU_API_URL, params=params) as resp:
            if resp.status != 200:
                return None, []
            data = await resp.json(content_type=None)
            if isinstance(data, list):
                card = data[0]
            else:
                card = data
            # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º DocLink1/2
            files = []
            for key in ["DocLink1", "DocLink2"]:
                if card.get(key):
                    files.append({"name": key, "url": card[key]})
            # –ï—Å–ª–∏ —Ñ–∞–π–ª–æ–≤ –Ω–µ—Ç ‚Äî –¥–µ–ª–∞–µ–º –≤—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å
            if not files:
                params2 = {"mode": "customerTenderDocs", "purchaseNumber": reg_number, "dtype": "json", "api_code": TENDER_GURU_API_KEY}
                if fz == "fz223":
                    params2["fz"] = "fz223"
                async with session.get(TENDERGURU_API_URL, params=params2) as resp2:
                    if resp2.status == 200:
                        docs = await resp2.json(content_type=None)
                        if isinstance(docs, list):
                            for doc in docs:
                                url = doc.get("View") or doc.get("DocPath")
                                if url and not url.startswith("http"):
                                    url = "https://www.tenderguru.ru" + url
                                if url:
                                    files.append({"name": doc.get("Filename", "–î–æ–∫—É–º–µ–Ω—Ç"), "url": url})
            return card, files

if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("analyze", analyze_tender_command))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, wait_for_link_handler))
    app.run_polling() 