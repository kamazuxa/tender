#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–¥–∏–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–Ω–¥–µ—Ä–∞
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ TenderGuru API –∏ –æ—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
"""

import json
from typing import Dict, List, Optional
from datetime import datetime

class TenderPromptBuilder:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–Ω–¥–µ—Ä–æ–≤
    """
    
    def __init__(self, max_text_length: int = 15000):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—è –ø—Ä–æ–º–ø—Ç–æ–≤
        
        Args:
            max_text_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –≤ –ø—Ä–æ–º–ø—Ç–µ
        """
        self.max_text_length = max_text_length
    
    def extract_product_list(self, tender_data: Dict) -> List[Dict]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–Ω–¥–µ—Ä–∞
        
        Args:
            tender_data: –î–∞–Ω–Ω—ã–µ —Ç–µ–Ω–¥–µ—Ä–∞ –∏–∑ API
            
        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∏ —Ü–µ–Ω–∞—Ö
        """
        products = []
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Ç–æ–≤–∞—Ä—ã –∏–∑ HTML –≤ –ø–æ–ª–µ Info
        info_html = tender_data.get('Info', '')
        if info_html:
            # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ HTML –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
            import re
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ HTML
            product_pattern = r'&lt;b&gt;–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, —Ä–∞–±–æ—Ç—ã, —É—Å–ª—É–≥–∏:&lt;/b&gt; ([^&]+)&lt;br /&gt;.*?&lt;b&gt;–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:&lt;/b&gt; (\d+).*?&lt;b&gt;–¶–µ–Ω–∞ –∑–∞ –µ–¥\.–∏–∑–º\.:&lt;/b&gt; ([\d.]+) —Ä—É–±–ª–µ–π.*?&lt;b&gt;–°—Ç–æ–∏–º–æ—Å—Ç—å:&lt;/b&gt; ([\d.]+) —Ä—É–±–ª–µ–π'
            
            matches = re.findall(product_pattern, info_html, re.DOTALL)
            
            for match in matches:
                name, qty, price, total = match
                products.append({
                    'name': name.strip(),
                    'qty': int(qty),
                    'price': float(price),
                    'sum': float(total)
                })
        
        return products
    
    def format_price(self, price_str: str) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ü–µ–Ω—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
        Args:
            price_str: –¶–µ–Ω–∞ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞
        """
        try:
            price = float(price_str)
            return f"{price:,.2f}".replace(',', ' ')
        except (ValueError, TypeError):
            return price_str
    
    def format_date(self, date_str: str) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
        Args:
            date_str: –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD-MM-YYYY
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞
        """
        try:
            if date_str:
                date_obj = datetime.strptime(date_str, "%d-%m-%Y")
                return date_obj.strftime("%d.%m.%Y")
        except (ValueError, TypeError):
            pass
        return date_str
    
    def build_analysis_prompt(self, tender_data: Dict, cleaned_text: str) -> str:
        """
        –°—Ç—Ä–æ–∏—Ç –µ–¥–∏–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–Ω–¥–µ—Ä–∞
        
        Args:
            tender_data: –î–∞–Ω–Ω—ã–µ —Ç–µ–Ω–¥–µ—Ä–∞ –∏–∑ TenderGuru API
            cleaned_text: –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
            
        Returns:
            str: –ü–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è OpenAI
        """
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        tender_number = tender_data.get('TenderNumOuter', '–ù–µ —É–∫–∞–∑–∞–Ω')
        tender_name = tender_data.get('TenderName', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        customer = tender_data.get('Customer', '–ù–µ —É–∫–∞–∑–∞–Ω')
        region = tender_data.get('Region', '–ù–µ —É–∫–∞–∑–∞–Ω')
        price = self.format_price(tender_data.get('Price', '0'))
        end_time = self.format_date(tender_data.get('EndTime', ''))
        tender_link = tender_data.get('TenderLink', '')
        tender_link_inner = tender_data.get('TenderLinkInner', '')
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
        products = self.extract_product_list(tender_data)
        
        # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if len(cleaned_text) > self.max_text_length:
            truncated_text = cleaned_text[:self.max_text_length] + "\n\n[–¢–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤]"
        else:
            truncated_text = cleaned_text
        
        # –°—Ç—Ä–æ–∏–º –ø—Ä–æ–º–ø—Ç
        prompt_parts = []
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        prompt_parts.append("üîç –ê–ù–ê–õ–ò–ó –¢–ï–ù–î–ï–†–ê")
        prompt_parts.append("=" * 60)
        prompt_parts.append("")
        
        # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–Ω–¥–µ—Ä–µ
        prompt_parts.append("üßæ –û–ë–©–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –¢–ï–ù–î–ï–†–ï:")
        prompt_parts.append("")
        prompt_parts.append(f"‚Ä¢ –ù–æ–º–µ—Ä —Ç–µ–Ω–¥–µ—Ä–∞: {tender_number}")
        prompt_parts.append(f"‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {tender_name}")
        prompt_parts.append(f"‚Ä¢ –ó–∞–∫–∞–∑—á–∏–∫: {customer}")
        prompt_parts.append(f"‚Ä¢ –†–µ–≥–∏–æ–Ω: {region}")
        prompt_parts.append(f"‚Ä¢ –ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {price} ‚ÇΩ")
        if end_time:
            prompt_parts.append(f"‚Ä¢ –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–æ–∫ –¥–æ: {end_time}")
        if tender_link:
            prompt_parts.append(f"‚Ä¢ –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ–Ω–¥–µ—Ä: {tender_link}")
        if tender_link_inner:
            prompt_parts.append(f"‚Ä¢ –°—Å—ã–ª–∫–∞ TenderGuru: {tender_link_inner}")
        prompt_parts.append("")
        
        # –ü–æ–∑–∏—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if products:
            prompt_parts.append("üìé –ü–û–ó–ò–¶–ò–ò –¢–û–í–ê–†–û–í:")
            prompt_parts.append("")
            total_sum = 0
            for product in products:
                name = product['name']
                qty = product['qty']
                price = product['price']
                sum_val = product['sum']
                total_sum += sum_val
                prompt_parts.append(f"‚Ä¢ {name} ‚Äî {qty} —à—Ç √ó {price:.2f} ‚ÇΩ = {sum_val:.2f} ‚ÇΩ")
            
            prompt_parts.append(f"")
            prompt_parts.append(f"üìä –ò—Ç–æ–≥–æ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º: {total_sum:.2f} ‚ÇΩ")
            prompt_parts.append("")
        
        # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Ç–µ–Ω–¥–µ—Ä–∞
        prompt_parts.append("üìÑ –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø –¢–ï–ù–î–ï–†–ê:")
        prompt_parts.append("")
        prompt_parts.append("<<<")
        prompt_parts.append(truncated_text)
        prompt_parts.append(">>>")
        prompt_parts.append("")
        
        # –ó–∞–¥–∞–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        prompt_parts.append("üîç –ü–†–û–ê–ù–ê–õ–ò–ó–ò–†–£–ô:")
        prompt_parts.append("")
        prompt_parts.append("1. –ß—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –∑–∞–¥–∞–Ω–∏—é?")
        prompt_parts.append("2. –ö–∞–∫–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ–≤–∞—Ä–∞, —É–ø–∞–∫–æ–≤–∫–∏, —Å—Ç—Ä–∞–Ω—ã –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è?")
        prompt_parts.append("3. –ï—Å—Ç—å –ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –°–ú–ü/–°–û–ù–û?")
        prompt_parts.append("4. –ö–∞–∫–∏–µ —Ä–∏—Å–∫–∏ –∏ –Ω–µ–æ—á–µ–≤–∏–¥–Ω—ã–µ –Ω—é–∞–Ω—Å—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç?")
        prompt_parts.append("5. –ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–ª—è —É—á–∞—Å—Ç–∏—è?")
        prompt_parts.append("6. –ï—Å—Ç—å –ª–∏ –æ—Å–æ–±—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É?")
        prompt_parts.append("7. –ö–∞–∫–∏–µ —Å—Ä–æ–∫–∏ –ø–æ—Å—Ç–∞–≤–∫–∏ –∏ —É—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã?")
        prompt_parts.append("")
        prompt_parts.append("üí° –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.")
        
        return "\n".join(prompt_parts)
    
    def build_simple_prompt(self, tender_data: Dict, cleaned_text: str) -> str:
        """
        –°—Ç—Ä–æ–∏—Ç —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        
        Args:
            tender_data: –î–∞–Ω–Ω—ã–µ —Ç–µ–Ω–¥–µ—Ä–∞ –∏–∑ TenderGuru API
            cleaned_text: –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
            
        Returns:
            str: –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        """
        
        tender_name = tender_data.get('TenderName', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        customer = tender_data.get('Customer', '–ù–µ —É–∫–∞–∑–∞–Ω')
        price = self.format_price(tender_data.get('Price', '0'))
        
        # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç
        if len(cleaned_text) > self.max_text_length:
            truncated_text = cleaned_text[:self.max_text_length] + "\n\n[–¢–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω]"
        else:
            truncated_text = cleaned_text
        
        prompt = f"""–ê–Ω–∞–ª–∏–∑ —Ç–µ–Ω–¥–µ—Ä–∞: {tender_name}
–ó–∞–∫–∞–∑—á–∏–∫: {customer}
–¶–µ–Ω–∞: {price} ‚ÇΩ

–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:
{truncated_text}

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–Ω–¥–µ—Ä –∏ –≤—ã–¥–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è, —Ä–∏—Å–∫–∏ –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏."""
        
        return prompt

def build_analysis_prompt(tender_data: Dict, cleaned_text: str) -> str:
    """
    –§—É–Ω–∫—Ü–∏—è-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞
    
    Args:
        tender_data: –î–∞–Ω–Ω—ã–µ —Ç–µ–Ω–¥–µ—Ä–∞ –∏–∑ TenderGuru API
        cleaned_text: –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        
    Returns:
        str: –ü–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è OpenAI
    """
    builder = TenderPromptBuilder()
    return builder.build_analysis_prompt(tender_data, cleaned_text) 

def build_final_prompt(data: dict) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–Ω–¥–µ—Ä–∞, –æ–±—ä–µ–¥–∏–Ω—è—è summary, items –∏ text.
    
    Args:
        data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç–µ–Ω–¥–µ—Ä–∞
            {
                "summary": {
                    "number": "0372200186425000005",
                    "title": "–ü–æ—Å—Ç–∞–≤–∫–∞ –∫–∞–Ω—Ü–µ–ª—è—Ä—Å–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤",
                    "customer": "–ì–ë–î–û–£ –¥–µ—Ç—Å–∫–∏–π —Å–∞–¥ ‚Ññ 21",
                    "region": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
                    "price": 30727.40,
                    "deadline": "11.07.2025",
                    "link": "http://zakupki.gov.ru/...",
                    "tenderguru": "https://www.tenderguru.ru/..."
                },
                "items": [
                    {"name": "–ø–∏—à—É—â–∏–π —É–∑–µ–ª", "qty": 20, "price": 37.51, "total": 750.20},
                    {"name": "–±—ã—Å—Ç—Ä–æ—Å–æ—Ö–Ω—É—â–∏–µ —á–µ—Ä–Ω–∏–ª–∞", "qty": 6, "price": 68.60, "total": 411.60}
                ],
                "text": {
                    "content": "–û–ü–ò–°–ê–ù–ò–ï –û–ë–™–ï–ö–¢–ê –ó–ê–ö–£–ü–ö–ò...",
                    "length": 7353,
                    "sources": ["–û–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∑–∞–∫—É–ø–∫–∏.docx"]
                }
            }
    
    Returns:
        str: –ì–æ—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ OpenAI
    """
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    summary = data.get("summary", {})
    items = data.get("items", [])
    text_data = data.get("text", {})
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É
    def format_price(price):
        if price is None:
            return "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
        try:
            return f"{float(price):,.2f}".replace(',', ' ')
        except (ValueError, TypeError):
            return str(price)
    
    # –°—Ç—Ä–æ–∏–º –ø—Ä–æ–º–ø—Ç
    prompt_parts = []
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    prompt_parts.append("üîç –ê–ù–ê–õ–ò–ó –¢–ï–ù–î–ï–†–ê")
    prompt_parts.append("=" * 60)
    prompt_parts.append("")
    
    # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    prompt_parts.append("üßæ –û–ë–©–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:")
    
    if summary.get("number"):
        prompt_parts.append(f"‚Ä¢ –ù–æ–º–µ—Ä —Ç–µ–Ω–¥–µ—Ä–∞: {summary['number']}")
    
    if summary.get("title"):
        prompt_parts.append(f"‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {summary['title']}")
    
    if summary.get("customer"):
        prompt_parts.append(f"‚Ä¢ –ó–∞–∫–∞–∑—á–∏–∫: {summary['customer']}")
    
    if summary.get("region"):
        prompt_parts.append(f"‚Ä¢ –†–µ–≥–∏–æ–Ω: {summary['region']}")
    
    if summary.get("price"):
        prompt_parts.append(f"‚Ä¢ –ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {format_price(summary['price'])} ‚ÇΩ")
    
    if summary.get("deadline"):
        prompt_parts.append(f"‚Ä¢ –°—Ä–æ–∫ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫: {summary['deadline']}")
    
    if summary.get("link"):
        prompt_parts.append(f"‚Ä¢ –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ–Ω–¥–µ—Ä: {summary['link']}")
    
    if summary.get("tenderguru"):
        prompt_parts.append(f"‚Ä¢ –°—Å—ã–ª–∫–∞ TenderGuru: {summary['tenderguru']}")
    
    prompt_parts.append("")
    
    # –ü–æ–∑–∏—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
    if items:
        prompt_parts.append("üì¶ –ü–û–ó–ò–¶–ò–ò –¢–û–í–ê–†–û–í:")
        
        total_sum = 0
        for item in items:
            name = item.get("name", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
            qty = item.get("qty", 0)
            price = item.get("price", 0)
            total = item.get("total", 0)
            total_sum += total
            
            prompt_parts.append(f"‚Ä¢ {name} ‚Äî {qty} —à—Ç √ó {format_price(price)} ‚ÇΩ = {format_price(total)} ‚ÇΩ")
        
        prompt_parts.append(f"‚Ä¢ –ò–¢–û–ì–û –ø–æ –ø–æ–∑–∏—Ü–∏—è–º: {format_price(total_sum)} ‚ÇΩ")
        prompt_parts.append("")
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    text_content = text_data.get("content", "")
    if text_content:
        prompt_parts.append("üìÑ –ò–ó–í–õ–ï–ß–Å–ù–ù–´–ô –¢–ï–ö–°–¢ –ò–ó –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò:")
        prompt_parts.append("<<<")
        prompt_parts.append(text_content)
        prompt_parts.append(">>>")
        prompt_parts.append("")
    
    # –ó–∞–¥–∞–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    prompt_parts.append("üéØ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–Ω–¥–µ—Ä –∏ –≤—ã–¥–∞–π:")
    prompt_parts.append("- –û—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ —É—Å–ª–æ–≤–∏—è")
    prompt_parts.append("- –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–∏—Å–∫–∏ –∏–ª–∏ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —É—Å–ª–æ–≤–∏—è")
    prompt_parts.append("- –ï—Å—Ç—å –ª–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ª–æ–≤—É—à–∫–∏ –∏–ª–∏ –∑–∞–≤—ã—à–µ–Ω–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è")
    prompt_parts.append("- –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ —Ç–µ–Ω–¥–µ—Ä—É")
    
    # –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ–º–ø—Ç
    full_prompt = "\n".join(prompt_parts)
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–æ 16000 —Å–∏–º–≤–æ–ª–æ–≤
    max_length = 16000
    if len(full_prompt) > max_length:
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é —Ç–µ–∫—Å—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        text_start = full_prompt.find("<<<")
        text_end = full_prompt.find(">>>")
        
        if text_start != -1 and text_end != -1:
            # –í—ã—á–∏—Å–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
            before_text = full_prompt[:text_start]
            after_text = full_prompt[text_end:]
            available_for_text = max_length - len(before_text) - len(after_text) - 10  # 10 –¥–ª—è "..." –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤
            
            if available_for_text > 100:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
                # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
                text_content = text_content[:available_for_text] + "\n\n[–¢–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤]"
                
                # –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ–º–ø—Ç
                prompt_parts = []
                prompt_parts.append("üîç –ê–ù–ê–õ–ò–ó –¢–ï–ù–î–ï–†–ê")
                prompt_parts.append("=" * 60)
                prompt_parts.append("")
                
                # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–ø–æ–≤—Ç–æ—Ä—è–µ–º)
                prompt_parts.append("üßæ –û–ë–©–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:")
                
                if summary.get("number"):
                    prompt_parts.append(f"‚Ä¢ –ù–æ–º–µ—Ä —Ç–µ–Ω–¥–µ—Ä–∞: {summary['number']}")
                
                if summary.get("title"):
                    prompt_parts.append(f"‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {summary['title']}")
                
                if summary.get("customer"):
                    prompt_parts.append(f"‚Ä¢ –ó–∞–∫–∞–∑—á–∏–∫: {summary['customer']}")
                
                if summary.get("region"):
                    prompt_parts.append(f"‚Ä¢ –†–µ–≥–∏–æ–Ω: {summary['region']}")
                
                if summary.get("price"):
                    prompt_parts.append(f"‚Ä¢ –ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {format_price(summary['price'])} ‚ÇΩ")
                
                if summary.get("deadline"):
                    prompt_parts.append(f"‚Ä¢ –°—Ä–æ–∫ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫: {summary['deadline']}")
                
                if summary.get("link"):
                    prompt_parts.append(f"‚Ä¢ –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ–Ω–¥–µ—Ä: {summary['link']}")
                
                if summary.get("tenderguru"):
                    prompt_parts.append(f"‚Ä¢ –°—Å—ã–ª–∫–∞ TenderGuru: {summary['tenderguru']}")
                
                prompt_parts.append("")
                
                # –ü–æ–∑–∏—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ (–ø–æ–≤—Ç–æ—Ä—è–µ–º)
                if items:
                    prompt_parts.append("üì¶ –ü–û–ó–ò–¶–ò–ò –¢–û–í–ê–†–û–í:")
                    
                    total_sum = 0
                    for item in items:
                        name = item.get("name", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
                        qty = item.get("qty", 0)
                        price = item.get("price", 0)
                        total = item.get("total", 0)
                        total_sum += total
                        
                        prompt_parts.append(f"‚Ä¢ {name} ‚Äî {qty} —à—Ç √ó {format_price(price)} ‚ÇΩ = {format_price(total)} ‚ÇΩ")
                    
                    prompt_parts.append(f"‚Ä¢ –ò–¢–û–ì–û –ø–æ –ø–æ–∑–∏—Ü–∏—è–º: {format_price(total_sum)} ‚ÇΩ")
                    prompt_parts.append("")
                
                # –û–±—Ä–µ–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                prompt_parts.append("üìÑ –ò–ó–í–õ–ï–ß–Å–ù–ù–´–ô –¢–ï–ö–°–¢ –ò–ó –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò:")
                prompt_parts.append("<<<")
                prompt_parts.append(text_content)
                prompt_parts.append(">>>")
                prompt_parts.append("")
                
                # –ó–∞–¥–∞–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                prompt_parts.append("üéØ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–Ω–¥–µ—Ä –∏ –≤—ã–¥–∞–π:")
                prompt_parts.append("- –û—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ —É—Å–ª–æ–≤–∏—è")
                prompt_parts.append("- –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–∏—Å–∫–∏ –∏–ª–∏ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —É—Å–ª–æ–≤–∏—è")
                prompt_parts.append("- –ï—Å—Ç—å –ª–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ª–æ–≤—É—à–∫–∏ –∏–ª–∏ –∑–∞–≤—ã—à–µ–Ω–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è")
                prompt_parts.append("- –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ —Ç–µ–Ω–¥–µ—Ä—É")
                
                full_prompt = "\n".join(prompt_parts)
            else:
                # –ï—Å–ª–∏ –º–µ—Å—Ç–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ, –æ–±—Ä–µ–∑–∞–µ–º –≤–µ—Å—å –ø—Ä–æ–º–ø—Ç
                full_prompt = full_prompt[:max_length-100] + "\n\n[–ü—Ä–æ–º–ø—Ç –æ–±—Ä–µ–∑–∞–Ω –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –¥–ª–∏–Ω–µ]"
    
    return full_prompt 

def structured_prompt_builder(tender_data: dict, clean_text: str, items: list[str]) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–Ω–¥–µ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
    summary (–¥–∞–Ω–Ω—ã–µ –∏–∑ TenderGuru)
    items (–ø–æ–∑–∏—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤)
    text (–æ—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏, —Å —Å–µ–∫—Ü–∏—è–º–∏)
    instructions (–∑–∞–¥–∞–Ω–∏–µ –¥–ª—è OpenAI)
    
    Args:
        tender_data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ç–µ–Ω–¥–µ—Ä–µ
        clean_text: –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        items: –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ —Ç–æ–≤–∞—Ä–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        
    Returns:
        str: –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è OpenAI
    """
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ tender_data
    reg_number = tender_data.get("reg_number", "–ù–µ —É–∫–∞–∑–∞–Ω")
    title = tender_data.get("title", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    customer = tender_data.get("customer", "–ù–µ —É–∫–∞–∑–∞–Ω")
    region = tender_data.get("region", "–ù–µ —É–∫–∞–∑–∞–Ω")
    price = tender_data.get("price", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
    deadline = tender_data.get("deadline", "–ù–µ —É–∫–∞–∑–∞–Ω")
    tender_url = tender_data.get("tender_url", "")
    tenderguru_url = tender_data.get("tenderguru_url", "")
    
    # –°—Ç—Ä–æ–∏–º –ø—Ä–æ–º–ø—Ç –ø–æ —à–∞–±–ª–æ–Ω—É
    prompt_parts = []
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    prompt_parts.append("üîç –ê–ù–ê–õ–ò–ó –¢–ï–ù–î–ï–†–ê")
    prompt_parts.append("=" * 60)
    prompt_parts.append("")
    
    # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    prompt_parts.append("üßæ –û–ë–©–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:")
    prompt_parts.append(f"‚Ä¢ –ù–æ–º–µ—Ä —Ç–µ–Ω–¥–µ—Ä–∞: {reg_number}")
    prompt_parts.append(f"‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {title}")
    prompt_parts.append(f"‚Ä¢ –ó–∞–∫–∞–∑—á–∏–∫: {customer}")
    prompt_parts.append(f"‚Ä¢ –†–µ–≥–∏–æ–Ω: {region}")
    prompt_parts.append(f"‚Ä¢ –ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {price}")
    prompt_parts.append(f"‚Ä¢ –°—Ä–æ–∫ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫: {deadline}")
    if tender_url:
        prompt_parts.append(f"‚Ä¢ –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ–Ω–¥–µ—Ä: {tender_url}")
    if tenderguru_url:
        prompt_parts.append(f"‚Ä¢ –°—Å—ã–ª–∫–∞ TenderGuru: {tenderguru_url}")
    prompt_parts.append("")
    
    # –ü–æ–∑–∏—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
    if items:
        prompt_parts.append("üì¶ –ü–û–ó–ò–¶–ò–ò –¢–û–í–ê–†–û–í:")
        for item in items:
            prompt_parts.append(item)
        prompt_parts.append("")
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    if clean_text:
        prompt_parts.append("üìÑ –ò–ó–í–õ–ï–ß–Å–ù–ù–´–ô –¢–ï–ö–°–¢ –ò–ó –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò:")
        prompt_parts.append("<<<")
        prompt_parts.append(clean_text)
        prompt_parts.append(">>>")
        prompt_parts.append("")
    
    # –ó–∞–¥–∞–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    prompt_parts.append("üéØ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–Ω–¥–µ—Ä –∏ –≤—ã–¥–∞–π:")
    prompt_parts.append("- –û—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ —É—Å–ª–æ–≤–∏—è")
    prompt_parts.append("- –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–∏—Å–∫–∏ –∏–ª–∏ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —É—Å–ª–æ–≤–∏—è")
    prompt_parts.append("- –ï—Å—Ç—å –ª–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ª–æ–≤—É—à–∫–∏ –∏–ª–∏ –∑–∞–≤—ã—à–µ–Ω–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è")
    prompt_parts.append("- –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ —Ç–µ–Ω–¥–µ—Ä—É")
    
    # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    full_prompt = "\n".join(prompt_parts)
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–æ 16000 —Å–∏–º–≤–æ–ª–æ–≤
    max_length = 16000
    if len(full_prompt) > max_length:
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é —Ç–µ–∫—Å—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        text_start = full_prompt.find("<<<")
        text_end = full_prompt.find(">>>")
        
        if text_start != -1 and text_end != -1:
            # –í—ã—á–∏—Å–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
            before_text = full_prompt[:text_start]
            after_text = full_prompt[text_end:]
            available_for_text = max_length - len(before_text) - len(after_text) - 10  # 10 –¥–ª—è "..." –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤
            
            if available_for_text > 100:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
                # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
                clean_text = clean_text[:available_for_text] + "\n\n[–¢–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤]"
                
                # –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ–º–ø—Ç
                prompt_parts = []
                
                # –ó–∞–≥–æ–ª–æ–≤–æ–∫
                prompt_parts.append("üîç –ê–ù–ê–õ–ò–ó –¢–ï–ù–î–ï–†–ê")
                prompt_parts.append("=" * 60)
                prompt_parts.append("")
                
                # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                prompt_parts.append("üßæ –û–ë–©–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:")
                prompt_parts.append(f"‚Ä¢ –ù–æ–º–µ—Ä —Ç–µ–Ω–¥–µ—Ä–∞: {reg_number}")
                prompt_parts.append(f"‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {title}")
                prompt_parts.append(f"‚Ä¢ –ó–∞–∫–∞–∑—á–∏–∫: {customer}")
                prompt_parts.append(f"‚Ä¢ –†–µ–≥–∏–æ–Ω: {region}")
                prompt_parts.append(f"‚Ä¢ –ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {price}")
                prompt_parts.append(f"‚Ä¢ –°—Ä–æ–∫ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫: {deadline}")
                if tender_url:
                    prompt_parts.append(f"‚Ä¢ –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ–Ω–¥–µ—Ä: {tender_url}")
                if tenderguru_url:
                    prompt_parts.append(f"‚Ä¢ –°—Å—ã–ª–∫–∞ TenderGuru: {tenderguru_url}")
                prompt_parts.append("")
                
                # –ü–æ–∑–∏—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
                if items:
                    prompt_parts.append("üì¶ –ü–û–ó–ò–¶–ò–ò –¢–û–í–ê–†–û–í:")
                    for item in items:
                        prompt_parts.append(item)
                    prompt_parts.append("")
                
                # –û–±—Ä–µ–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                prompt_parts.append("üìÑ –ò–ó–í–õ–ï–ß–Å–ù–ù–´–ô –¢–ï–ö–°–¢ –ò–ó –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò:")
                prompt_parts.append("<<<")
                prompt_parts.append(clean_text)
                prompt_parts.append(">>>")
                prompt_parts.append("")
                
                # –ó–∞–¥–∞–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                prompt_parts.append("üéØ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–Ω–¥–µ—Ä –∏ –≤—ã–¥–∞–π:")
                prompt_parts.append("- –û—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ —É—Å–ª–æ–≤–∏—è")
                prompt_parts.append("- –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–∏—Å–∫–∏ –∏–ª–∏ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —É—Å–ª–æ–≤–∏—è")
                prompt_parts.append("- –ï—Å—Ç—å –ª–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ª–æ–≤—É—à–∫–∏ –∏–ª–∏ –∑–∞–≤—ã—à–µ–Ω–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è")
                prompt_parts.append("- –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ —Ç–µ–Ω–¥–µ—Ä—É")
                
                full_prompt = "\n".join(prompt_parts)
            else:
                # –ï—Å–ª–∏ –º–µ—Å—Ç–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ, –æ–±—Ä–µ–∑–∞–µ–º –≤–µ—Å—å –ø—Ä–æ–º–ø—Ç
                full_prompt = full_prompt[:max_length-100] + "\n\n[–ü—Ä–æ–º–ø—Ç –æ–±—Ä–µ–∑–∞–Ω –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –¥–ª–∏–Ω–µ]"
    
    return full_prompt


def extract_sections_from_text(clean_text: str) -> list[str]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–µ–∫—Ü–∏–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –≤ –Ω–µ–º –µ—Å—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    
    Args:
        clean_text: –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        
    Returns:
        list[str]: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–µ–∫—Ü–∏–π
    """
    import re
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ **–ó–ê–ì–û–õ–û–í–û–ö**
    section_pattern = r'\*\*([^*]+)\*\*'
    sections = re.findall(section_pattern, clean_text)
    
    return sections 